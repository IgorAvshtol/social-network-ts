{"version":3,"sources":["components/Users/users.module.css","components/Users/Paginator.module.css","../node_modules/classnames/index.js","assets/images/users.jpg","components/Users/Paginator.tsx","redux/users-selectors.ts","components/Users/Users.tsx","components/Users/UserContainerFC.tsx"],"names":["module","exports","hasOwn","hasOwnProperty","classNames","classes","i","arguments","length","arg","argType","push","Array","isArray","inner","apply","toString","Object","prototype","key","call","join","default","Paginator","props","pagesCount","Math","ceil","totalUsersCount","pageSize","pages","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","className","styles","paginator","onClick","filter","p","map","cn","selectedPage","currentPage","pageNumber","e","onPageChanged","getUserSelector","state","usersPage","users","getPageSize","getTotalUsersCount","getCurrentPage","getIsFatching","isFatching","getFollowInProgress","followingInProgress","Users","useSelector","dispatch","useDispatch","u","to","id","src","photos","small","userPhoto","followed","disabled","some","userId","unfollow","follow","name","status","Users–°ontainerFC","useEffect","getUsers","loader"],"mappings":"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","file":"static/js/3.ccb816e6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"users_userPhoto__mPJPf\",\"selectedPage\":\"users_selectedPage__3g8Up\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginator\":\"Paginator_paginator__2ea92\",\"pageNumber\":\"Paginator_pageNumber__bfszL\",\"selectedPage\":\"Paginator_selectedPage__3T-9C\"};","/*!\n  Copyright (c) 2018 Jed Watson.\n  Licensed under the MIT License (MIT), see\n  http://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n\t'use strict';\n\n\tvar hasOwn = {}.hasOwnProperty;\n\n\tfunction classNames() {\n\t\tvar classes = [];\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (!arg) continue;\n\n\t\t\tvar argType = typeof arg;\n\n\t\t\tif (argType === 'string' || argType === 'number') {\n\t\t\t\tclasses.push(arg);\n\t\t\t} else if (Array.isArray(arg)) {\n\t\t\t\tif (arg.length) {\n\t\t\t\t\tvar inner = classNames.apply(null, arg);\n\t\t\t\t\tif (inner) {\n\t\t\t\t\t\tclasses.push(inner);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (argType === 'object') {\n\t\t\t\tif (arg.toString === Object.prototype.toString) {\n\t\t\t\t\tfor (var key in arg) {\n\t\t\t\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\t\t\t\tclasses.push(key);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tclasses.push(arg.toString());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn classes.join(' ');\n\t}\n\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\tclassNames.default = classNames;\n\t\tmodule.exports = classNames;\n\t} else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n\t\t// register as 'classnames', consistent with npm package name\n\t\tdefine('classnames', [], function () {\n\t\t\treturn classNames;\n\t\t});\n\t} else {\n\t\twindow.classNames = classNames;\n\t}\n}());\n","export default __webpack_public_path__ + \"static/media/users.ea27fa10.jpg\";","import React, {useState} from \"react\";\r\nimport styles from \"./Paginator.module.css\";\r\nimport cn from \"classnames\"\r\n\r\n\r\ntype PaginatorType = {\r\n    pageSize: number,\r\n    currentPage: number,\r\n    totalUsersCount: number,\r\n    onPageChanged: (p: number) => void\r\n}\r\n\r\nconst Paginator = (props: PaginatorType) => {\r\n\r\n    let portionSize = 10\r\n\r\n    let pagesCount = Math.ceil(props.totalUsersCount / props.pageSize)\r\n    let pages = []\r\n\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n\r\n    let portionCount = Math.ceil(pagesCount / portionSize)\r\n    let [portionNumber, setPortionNumber] = useState(1)\r\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1\r\n    let rightPortionPageNumber = portionNumber * portionSize\r\n    return <div className={styles.paginator}>\r\n        {portionNumber > 1 &&\r\n        <button onClick={() => {\r\n            setPortionNumber(portionNumber - 1)\r\n        }}>Prev</button>}\r\n        {pages\r\n            .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\r\n            .map((p) => {\r\n                return <span className={cn({\r\n                    [styles.selectedPage]: props.currentPage === p\r\n                }, styles.pageNumber)}\r\n                             key={p}\r\n                             onClick={(e) => {\r\n                                 props.onPageChanged(p)\r\n                             }}>{p}</span>\r\n            })}\r\n        {portionCount > portionNumber &&\r\n        <button onClick={() => {\r\n            setPortionNumber(portionNumber + 1)\r\n        }\r\n        }>gf</button>}\r\n    </div>\r\n}\r\n\r\n\r\nexport default Paginator\r\n","import React from \"react\";\r\nimport {AppStateType} from \"./redux-store\";\r\n\r\n\r\nexport const getUserSelector = (state: AppStateType) => {\r\n    return state.usersPage.users\r\n}\r\n\r\nexport const getPageSize = (state: AppStateType) => {\r\n    return state.usersPage.pageSize\r\n}\r\n\r\nexport const getTotalUsersCount = (state: AppStateType) => {\r\n    return state.usersPage.totalUsersCount\r\n}\r\n\r\nexport const getCurrentPage = (state: AppStateType) => {\r\n    return state.usersPage.currentPage\r\n}\r\n\r\nexport const getIsFatching = (state: AppStateType) => {\r\n    return state.usersPage.isFatching\r\n}\r\n\r\nexport const getFollowInProgress = (state: AppStateType) => {\r\n    return state.usersPage.followingInProgress\r\n}","import styles from \"./users.module.css\";\r\nimport userPhoto from \"../../assets/images/users.jpg\";\r\nimport React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport Paginator from \"./Paginator\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {\r\n    getCurrentPage,\r\n    getFollowInProgress,\r\n    getPageSize,\r\n    getTotalUsersCount,\r\n    getUserSelector\r\n} from \"../../redux/users-selectors\";\r\nimport {follow, unfollow} from \"../../redux/users-reducer\";\r\n\r\n\r\ntype UsersFunctionalType = {\r\n    // users: Array<UsersType>,\r\n    // pageSize: number,\r\n    // currentPage: number,\r\n    // totalUsersCount: number,\r\n    // follow: (userId: number) => void,\r\n    // unfollow: (userId: number) => void,\r\n    onPageChanged: (p: number) => void\r\n    // followingInProgress: Array<FollowingProgressType>\r\n    // toggleFollowingProgress: (isFatching: boolean, userId: number) => void\r\n}\r\n\r\nlet Users = (props: UsersFunctionalType) => {\r\n\r\n    //\r\n    // let pagesCount = Math.ceil(props.totalUsersCount / props.pageSize)\r\n    // let pages = []\r\n    //\r\n    // for (let i = 1; i <= pagesCount; i++) {\r\n    //     pages.push(i)\r\n    // }\r\n\r\n    const users = useSelector(getUserSelector)\r\n    const pageSize = useSelector(getPageSize)\r\n    const totalUsersCount = useSelector(getTotalUsersCount)\r\n    const currentPage = useSelector(getCurrentPage)\r\n    const followingInProgress = useSelector(getFollowInProgress)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const Follow = (userId: number) => {\r\n        dispatch(follow(userId))\r\n    }\r\n\r\n    const Unfollow = (userId: number) => {\r\n        dispatch(unfollow(userId))\r\n    }\r\n\r\n\r\n    return <div>\r\n        <Paginator pageSize={pageSize} currentPage={currentPage} totalUsersCount={totalUsersCount} onPageChanged={props.onPageChanged}/>\r\n        {\r\n            users.map(u => <div key={u.id}>\r\n                <span>\r\n                    <div>\r\n                        <NavLink to={\"/profile/\" + u.id}>\r\n                        <img src={u.photos.small != null ? u.photos.small : userPhoto} className={styles.userPhoto}/>\r\n                            </NavLink>\r\n                    </div>\r\n                    <div>\r\n                        {u.followed\r\n                            ? <button disabled={followingInProgress.some(id => id === u.id)} onClick={() => {\r\n                                Unfollow(u.id)\r\n                                // props.toggleFollowingProgress(true, u.id)\r\n                                // usersAPI.unfollow(u.id)\r\n                                // // axios.delete(`https://social-network.samuraijs.com/api/1.0/follow/${u.id}`, {\r\n                                // //     withCredentials: true,\r\n                                // //     headers: {\r\n                                // //         \"API-KEY\": \"38c3a417-44c2-476d-ad1b-ea982c1c54f6\"\r\n                                // //     }\r\n                                // // })\r\n                                //     .then(response => {\r\n                                //         if (response.data.resultCode == 0) {\r\n                                //             props.unfollow(u.id)\r\n                                //         }\r\n                                //         props.toggleFollowingProgress(false, u.id)\r\n                                //     })\r\n                            }}>Unfollow</button>\r\n                            : <button disabled={followingInProgress.some(id => id === u.id)} onClick={() => {\r\n                                Follow(u.id)\r\n                                // props.toggleFollowingProgress(true, u.id)\r\n                                // usersAPI.follow(u.id)\r\n                                // axios.post(`https://social-network.samuraijs.com/api/1.0/follow/${u.id}`, {}, {\r\n                                //     withCredentials: true,\r\n                                //     headers: {\r\n                                //         \"API-KEY\": \"38c3a417-44c2-476d-ad1b-ea982c1c54f6\"\r\n                                //     }\r\n                                // })\r\n                                //     .then(response => {\r\n                                //         if (response.data.resultCode == 0) {\r\n                                //             props.follow(u.id)\r\n                                //         }\r\n                                //         props.toggleFollowingProgress(false, u.id)\r\n                                //     })\r\n                            }}>Follow</button>}\r\n                    </div>\r\n                </span>\r\n                <span>\r\n                    <span>\r\n                        <div>{u.name}</div><div>{u.status}</div>\r\n                    </span>\r\n                    <span>\r\n                        <div>{'u.location.city'}</div><div>{'u.location.country'}</div>\r\n                    </span>\r\n                </span>\r\n            </div>)\r\n        }\r\n        <button>More</button>\r\n    </div>\r\n\r\n}\r\n\r\n\r\n\r\n\r\nexport default Users\r\n\r\n","import React, {useEffect} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getUsers} from \"../../redux/users-reducer\";\r\nimport Users from \"./Users\";\r\nimport loader from \"./../../assets/images/loader.png\"\r\nimport {getCurrentPage, getIsFatching, getPageSize} from \"../../redux/users-selectors\";\r\n\r\n\r\n// type UsersComponentType = {\r\n//     users: Array<UsersType>\r\n//     pageSize: number,\r\n//     totalUsersCount: number,\r\n//     currentPage: number,\r\n//     follow: (userId: number) => void,\r\n//     unfollow: (userId: number) => void,\r\n//     // setusers: (users: Array<UsersType>) => void,\r\n//     setTotalUsersCount: (totalUsersCount: number) => void,\r\n//     // setCurrentPage: (currentPage: number) => void,\r\n//     isFatching: boolean,\r\n//     // toggleIsFatching: (isFatching: boolean) => void\r\n//     // toggleFollowingProgress: (isFatching: boolean, userId: number) => void\r\n//     followingInProgress: Array<FollowingProgressType>\r\n//     getUsers: (currentPage: number, pageSize: number) => void\r\n//\r\n// }\r\n\r\n\r\nfunction Users–°ontainerFC() {\r\n\r\n    const isFatching = useSelector(getIsFatching)\r\n    const currentPage = useSelector(getCurrentPage)\r\n    const pageSize = useSelector(getPageSize)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    useEffect(() => {\r\n        dispatch(getUsers(currentPage, pageSize))\r\n    }, [])\r\n    // componentDidMount() {\r\n    //    props.getUsers(props.currentPage, props.pageSize)\r\n    // }\r\n\r\n    let onPageChanged = (pageNumber: number) => {\r\n        dispatch(getUsers(pageNumber, pageSize))\r\n    }\r\n\r\n\r\n\r\n    return <>\r\n        {isFatching ? <img src={loader}/> : null}\r\n        <Users\r\n            // totalUsersCount={props.totalUsersCount}\r\n            // pageSize={props.pageSize}\r\n            // currentPage={props.currentPage}\r\n            onPageChanged={onPageChanged}\r\n            // users={props.users}\r\n            // follow={props.follow}\r\n            // unfollow={props.unfollow}\r\n            // toggleFollowingProgress={this.props.toggleFollowingProgress}\r\n            // followingInProgress={props.followingInProgress}\r\n        />\r\n    </>\r\n}\r\nexport default Users–°ontainerFC\r\n//\r\n// let mapStateToProps = (state: AppStateType) => {\r\n//     return {\r\n//         users: getUserSelector(state),\r\n//         pageSize: getPageSize(state),\r\n//         totalUsersCount: getTotalUsersCount(state),\r\n//         currentPage: getCurrentPage(state),\r\n//         isFatching: getIsFatching(state),\r\n//         followingInProgress: getFollowInProgress(state)\r\n//     }\r\n// }\r\n//\r\n//\r\n// export default compose<React.ComponentType>(\r\n//     connect(mapStateToProps, {\r\n//         follow,\r\n//         unfollow,\r\n//         setTotalUsersCount,\r\n//         getUsers\r\n//     }),\r\n//     withAuthRedirect\r\n// )(Users–°ontainerFC)\r\n"],"sourceRoot":""}