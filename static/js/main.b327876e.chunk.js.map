{"version":3,"sources":["assets/images/loader.png","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/Post/Post.module.css","api/api.ts","components/Navbar/Navbar.module.css","components/Dialogs/Dialogs.module.css","redux/profile-reducer.tsx","redux/message-reducer.tsx","redux/auth-reducer.tsx","redux/app-reducer.tsx","redux/redux-store.tsx","components/Navbar/Navbar.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Common/FormsControls/FormsControls.tsx","utilits/validators/validators.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/AddMessageForm/AddMessageForm.tsx","hoc/withAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx","components/Profile/ProfileInfo/ProfileStatus.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/Post/MyPosts.tsx","components/Profile/MyPosts/Post/MyPostsContainer.tsx","components/Profile/Profile/Profile.tsx","components/Profile/Profile/ProfileContainer.tsx","components/Header/Header.tsx","components/Header/HeaderContainer.tsx","components/Login/Login.tsx","components/Common/Preloader.tsx","App.tsx","hoc/withSuspense.tsx","index.tsx","components/Common/FormsControls/FormControls.module.css","components/Profile/MyPosts/Post/MyPosts.module.css","components/Header/Header.module.css","redux/users-reducer.tsx"],"names":["module","exports","instance","axios","create","withCredentials","baseURL","headers","usersAPI","getUsers","currentPage","pageSize","get","then","response","data","follow","userID","post","unfollow","delete","getProfile","console","warn","profileAPI","getStatus","updateStatus","status","put","authAPI","me","login","email","password","rememberMe","logout","initialState","posts","id","message","likesCount","profile","userId","lookingForAJob","lookingForAJobDescription","fullName","contacts","github","vk","facebook","instagram","twitter","website","youtube","mainLink","photos","small","large","setStatus","type","profileReducer","state","action","newPost","newPostText","messages","dialogs","name","messageReducer","body","newMessageBody","isAuth","setAuthUserData","getAuthUserData","dispatch","a","resultCode","authReducer","initialized","appReducer","reducers","combineReducers","profilePage","messagePage","usersPage","usersReducer","auth","form","formReducer","app","store","createStore","applyMiddleware","thunkMiddleware","Navbar","className","s","nav","item","to","activeClassName","activeLink","DialogItem","props","path","dialog","active","Message","Textarea","input","meta","hasError","touched","error","formControl","Input","required","value","AddMessageFormRedux","reduxForm","onSubmit","handleSubmit","Field","placeholder","component","validate","Dialogs","dialogElements","map","messageElement","dialogsItems","updateNewMessageBody","onNewMessageBody","mapStateToProps","compose","connect","log","Component","RedirectComponent","this","restProps","React","ProfileStatus","useState","newstatus","setNewStatus","editMode","setEditMode","useEffect","onClick","onChange","e","currentTarget","autoFocus","onBlur","maxLength","ProfileInfo","src","descriptionBlock","Post","maxLength10","length","AddNewPost","MyPosts","postsElement","p","postsBlock","addPost","MyPostsContainer","addPostActionCreator","Profile","ProfileContainer","match","params","autorizedUserID","getUserProfile","getUserStatus","withRouter","Header","header","loginBlock","HeaderContainer","LoginReduxForm","formSummaryError","errorMessage","stopSubmit","_error","formData","Preloader","loader","UsersContainerFC","lazy","App","initializeApp","render","DialogsContainer","Suspense","fallback","promise","Promise","all","ReactDOM","document","getElementById","users","totalUsersCount","isFatching","followingInProgress","portionSize","followSuccess","unfollowSuccess","setCurrentPage","toggleIsFatching","toggleFollowingProgress","items","totalCount","u","followed","filter"],"mappings":"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","file":"static/js/main.b327876e.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/loader.e61adeab.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__5TaNc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__3y8ny\"};","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: {\r\n        \"API-KEY\": \"38c3a417-44c2-476d-ad1b-ea982c1c54f6\"\r\n    }\r\n})\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage = 1, pageSize = 10) {\r\n        return instance.get(`users?page=${currentPage}&count=${pageSize}`)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n    follow(userID: number) {\r\n        return instance.post(`follow/${userID}`)\r\n\r\n    },\r\n    unfollow(userID: number) {\r\n        return instance.delete(`follow/${userID}`)\r\n\r\n    },\r\n    getProfile(userID: number) {                                          //Сделали так чтобы не переименовывать везде\r\n        console.warn(\"Obsolet method.Please, use profileAPI\")\r\n        return profileAPI.getProfile(userID)\r\n    }\r\n\r\n}\r\n\r\nexport const profileAPI = {\r\n    getProfile(userID: number) {\r\n        return instance.get(`profile/` + userID)\r\n    },\r\n    getStatus(userID: number) {\r\n        return instance.get(`profile/status/` + userID)\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put(`profile/status/`, {status: status})  //потому что запрос \"put\" передаём body = тексту status\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get(`auth/me`)\r\n    },\r\n    login(email: string, password: string, rememberMe = false) {\r\n        return instance.post(`auth/login`, {email, password, rememberMe})\r\n    },\r\n    logout() {\r\n        return instance.delete(`auth/login`)\r\n    }\r\n}\r\n\r\n//староееееееееее\r\n// export const getUsers = (currentPage = 1, pageSize = 10) => {\r\n//    return axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${currentPage}&count=${pageSize}`,\r\n//         {\r\n//             withCredentials: true\r\n//         })\r\n//         .then(response => {\r\n//             return response.data\r\n//         })\r\n// }\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__10bi3\",\"item\":\"Navbar_item__3xwi2\",\"activeLink\":\"Navbar_activeLink__1f3Ug\",\"friends\":\"Navbar_friends__11k3m\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__7oQaZ\",\"dialogsItems\":\"Dialogs_dialogsItems__m9MD6\",\"active\":\"Dialogs_active__7QZTh\",\"messages\":\"Dialogs_messages__pb9o8\",\"message\":\"Dialogs_message__12dll\"};","import {Dispatch} from \"redux\";\r\nimport {profileAPI, usersAPI} from \"../api/api\";\r\n\r\n\r\nlet initialState = {\r\n    posts: [\r\n        {id: 1, message: 'Hi, how are you', likesCount: 1},\r\n        {id: 2, message: \"It's my first post\", likesCount: 1},\r\n    ],\r\n    // newPostText: \"\",\r\n    profile: {\r\n        userId: 0,\r\n        lookingForAJob: false,\r\n        lookingForAJobDescription: \"\",\r\n        fullName: \"\",\r\n        contacts: {\r\n            github: \"\",\r\n            vk: \"\",\r\n            facebook: \"\",\r\n            instagram: \"\",\r\n            twitter: \"\",\r\n            website: \"\",\r\n            youtube: \"\",\r\n            mainLink: \"\",\r\n        },\r\n        photos: {\r\n            small: \"\",\r\n            large: \"\"\r\n        }\r\n    },\r\n    status: \"\"\r\n\r\n}\r\n\r\nexport type PostsType = {\r\n    id: number\r\n    message: any\r\n    likesCount: number\r\n}\r\n\r\n\r\nexport type ProfilePageType = {\r\n    posts: Array<PostsType>\r\n    // newPostText: string\r\n    profile: ProfileType\r\n    status: string\r\n}\r\n\r\nexport type ProfileType = {\r\n    userId: number\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    fullName: string\r\n    contacts: {\r\n        github: string\r\n        vk: string\r\n        facebook: string\r\n        instagram: string\r\n        twitter: string\r\n        website: string\r\n        youtube: string\r\n        mainLink: string\r\n    }\r\n    photos: {\r\n        small: string\r\n        large: string\r\n    }\r\n}\r\n\r\n\r\nconst profileReducer = (state: ProfilePageType = initialState, action: ProfileReducersActionsTypes): ProfilePageType => {\r\n    switch (action.type) {\r\n        case \"ADD-POST\":\r\n            let newPost: PostsType = {\r\n                id: 5,\r\n                message: action.newPostText,\r\n                likesCount: 0\r\n            }\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost],\r\n                // newPostText: \"\"\r\n            }\r\n        case \"SET-USER-PROFILE\": {\r\n            return {\r\n                ...state, profile: action.profile,\r\n            }\r\n        }\r\n        case \"SET-STATUS\": {\r\n            return {\r\n                ...state, status: action.status,\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nconst ADD_POST = \"ADD-POST\";\r\nconst SET_USER_PROFILE = \"SET-USER-PROFILE\";\r\nconst SET_STATUS = \"SET-STATUS\";\r\n\r\nexport type ProfileReducersActionsTypes =\r\n    ReturnType<typeof addPostActionCreator>\r\n    | ReturnType<typeof setUserProfile>\r\n    | ReturnType<typeof setStatus>\r\n\r\n\r\nexport const addPostActionCreator = (newPostText: string) => {\r\n    return {\r\n        type: ADD_POST, newPostText\r\n    } as const\r\n}\r\n\r\n\r\nexport const setUserProfile = (profile: ProfileType) => {\r\n    return {\r\n        type: SET_USER_PROFILE,\r\n        profile\r\n    } as const\r\n}\r\n\r\n\r\nexport const setStatus = (status: string) => {\r\n    return {\r\n        type: SET_STATUS,\r\n        status\r\n    } as const\r\n}\r\n\r\n\r\nexport const getUserProfile = (userID: number) => {\r\n    return async (dispatch: Dispatch) => {\r\n        let response = await usersAPI.getProfile(userID) //Ключевое слово await заставит интерпретатор JavaScript ждать до тех пор, пока промис справа от await не выполнится. После чего оно вернёт его результат, и выполнение кода продолжится.\r\n        if (response.status === 200) {\r\n            dispatch(setUserProfile(response.data))\r\n        }\r\n    }\r\n}\r\n\r\n// export const getUserProfile = (userID: number) => {\r\n//     return (dispatch: Dispatch) => {\r\n//         usersAPI.getProfile(userID).then(response => {\r\n//             if (response.status === 200) {\r\n//                 dispatch(setUserProfile(response.data))\r\n//             }\r\n//         })\r\n//     }\r\n// }\r\n\r\nexport const getUserStatus = (userID: number) => {\r\n    return async (dispatch: Dispatch) => {\r\n        let response = await profileAPI.getStatus(userID)\r\n        dispatch(setStatus(response.data))\r\n        console.log(response.data)\r\n    }\r\n}\r\n\r\nexport const updateStatus = (status: string) => {\r\n    return async (dispatch: Dispatch) => {\r\n        let response = await profileAPI.updateStatus(status)\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(setStatus(status))\r\n        }\r\n    }\r\n}\r\n\r\nexport default profileReducer","import {ProfilePageType} from \"./profile-reducer\";\r\n\r\n\r\nlet initialState = {\r\n    messages: [\r\n        {id: 1, message: 'Make America Great Again'},\r\n        {id: 2, message: 'Show your gun'},\r\n        {id: 3, message: 'Are you gansters?'},\r\n    ],\r\n    dialogs: [\r\n        {id: 1, name: 'Trump'},\r\n        {id: 2, name: 'Biden'},\r\n        {id: 4, name: 'Bush'},\r\n        {id: 3, name: 'Abama'},\r\n    ]\r\n}\r\n\r\ntype MessageType = {\r\n    id: number\r\n    message: string\r\n}\r\n\r\ntype DialogsType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\n\r\nexport type MessagePageType = {\r\n    messages: Array<MessageType>\r\n    dialogs: Array<DialogsType>\r\n}\r\n\r\nexport type RootStateType = {\r\n    profilePage: ProfilePageType\r\n    messagePage: MessagePageType\r\n    sidebar?: string\r\n}\r\n\r\nconst messageReducer = (state: MessagePageType = initialState, action: MessageReducerActionsTypes) => {\r\n\r\n\r\n    switch (action.type) {\r\n        case \"SEND-MESSAGE\": {\r\n            let body = action.newMessageBody\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, {id: 6, message: body}]\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n\r\n}\r\n\r\nexport default messageReducer\r\n\r\n\r\nconst SEND_MESSAGE = \"SEND-MESSAGE\";\r\n\r\n\r\nexport type MessageReducerActionsTypes =\r\n    ReturnType<typeof sendMessageCreator>\r\n\r\n\r\nexport const sendMessageCreator = (newMessageBody: string) => {\r\n    console.log(newMessageBody);\r\n    return {\r\n        type: SEND_MESSAGE, newMessageBody\r\n\r\n    } as const\r\n}\r\n\r\n","import {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../api/api\";\r\nimport {stopSubmit} from \"redux-form\";\r\n\r\n\r\nlet initialState = {\r\n    userId: 10940,\r\n    email: \"\",\r\n    login: \"\",\r\n    isAuth: false,\r\n    password: \"\",\r\n    rememberMe: false\r\n}\r\n\r\ntype UsersStateType = {\r\n    userId: number,\r\n    email: string,\r\n    login: string,\r\n    isAuth: boolean,\r\n    password: string,\r\n    rememberMe: boolean\r\n}\r\n\r\nexport type LoginType = {\r\n    email: string,\r\n    password: string,\r\n    rememberMe: boolean\r\n}\r\n\r\nconst authReducer = (state: UsersStateType = initialState, action: AuthActionType): UsersStateType => {\r\n    switch (action.type) {\r\n        case \"SET-USER-DATA\":\r\n            return {\r\n                ...state,\r\n                ...action.data,\r\n                // isAuth: true\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport type AuthActionType = ReturnType<typeof setAuthUserData>\r\n\r\n\r\nconst SET_USER_DATA = \"SET-USER-DATA\";\r\n\r\n\r\nexport const setAuthUserData = (id: number, email: string, login: string, isAuth: boolean) => {\r\n    return {\r\n        type: SET_USER_DATA, data: {id, email, login, isAuth}\r\n    } as const\r\n}\r\n\r\n\r\nexport const getAuthUserData = (): any => {\r\n    return async (dispatch: Dispatch) => {\r\n        let response = await authAPI.me()\r\n        if (response.data.resultCode === 0) {   //ЕСЛИ ЗАЛОГИНЕНЫ, ТОГДА СЕТАЕМ resultCode === 0\r\n            let {id, email, login} = response.data.data\r\n            dispatch(setAuthUserData(id, email, login, true))\r\n        }\r\n    }\r\n}\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean) => {\r\n    return async (dispatch: Dispatch) => {\r\n        let response = await authAPI.login(email, password, rememberMe)\r\n        if (response.data.resultCode === 0) {   //ЕСЛИ ЗАЛОГИНЕНЫ, ТОГДА СЕТАЕМ resultCode === 0\r\n            dispatch(getAuthUserData())   //после вводв логина и мейла заново диспатчим АС\r\n        } else {\r\n            let errorMessage = response.data.messages.length > 0 ? response.data.messages[0] : \"Some error\"\r\n            dispatch(stopSubmit('login', {_error: errorMessage}))\r\n        }\r\n    }\r\n}\r\n\r\n// export const login = (email: string, password: string, rememberMe: boolean) => {\r\n//     return (dispatch: Dispatch) => {\r\n//         authAPI.login(email, password, rememberMe).then(response => {\r\n//             if (response.data.resultCode === 0) {   //ЕСЛИ ЗАЛОГИНЕНЫ, ТОГДА СЕТАЕМ resultCode === 0\r\n//                 dispatch(getAuthUserData())   //после вводв логина и мейла заново диспатчим АС\r\n//             } else {\r\n//                 let errorMessage = response.data.messages.length > 0 ? response.data.messages[0] : \"Some error\"\r\n//                 dispatch(stopSubmit('login', {_error: errorMessage}))\r\n//             }\r\n//         })\r\n//     }\r\n// }\r\n\r\nexport const logout = () => {\r\n    return async (dispatch: Dispatch) => {\r\n        let response = await authAPI.logout()\r\n        if (response.data.resultCode === 0) {   //ЕСЛИ ЗАЛОГИНЕНЫ, ТОГДА СЕТАЕМ resultCode === 0\r\n            dispatch(setAuthUserData(0, \"\", \"\", false))   //обнуляем все значения и сетаем чтобы выйти из системы\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport default authReducer","import {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../api/api\";\r\nimport {stopSubmit} from \"redux-form\";\r\nimport {getAuthUserData} from \"./auth-reducer\";\r\n\r\n\r\nlet initialState = {\r\n    initialized: false\r\n\r\n}\r\n\r\ntype UsersStateType = {\r\n    initialized: boolean\r\n}\r\n\r\n\r\nconst appReducer = (state: UsersStateType = initialState, action: AuthActionType): UsersStateType => {\r\n    switch (action.type) {\r\n        case \"INITIALIZED_SUCCESS\":\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport type AuthActionType = ReturnType<typeof initializedSuccess>\r\n\r\n\r\nconst INITIALIZED_SUCCESS = \"INITIALIZED_SUCCESS\";\r\n\r\n\r\nexport const initializedSuccess = () => {\r\n    return {\r\n        type: INITIALIZED_SUCCESS,\r\n    } as const\r\n}\r\n\r\n\r\nexport const initializeApp = () => (dispatch: Dispatch) => {\r\n   let promise = dispatch (getAuthUserData())\r\n    Promise.all([promise]).then(()=> {\r\n        dispatch(initializedSuccess())\r\n    })\r\n}\r\n\r\n\r\n\r\nexport default appReducer","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport profileReducer, {ProfileReducersActionsTypes} from \"./profile-reducer\";\r\nimport messageReducer, {MessageReducerActionsTypes} from \"./message-reducer\";\r\nimport usersReducer, {UsersActionType} from \"./users-reducer\";\r\nimport authReducer, {AuthActionType} from \"./auth-reducer\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport { reducer as formReducer } from \"redux-form\";\r\nimport appReducer from \"./app-reducer\";\r\n\r\nlet reducers = combineReducers({\r\n    profilePage: profileReducer,\r\n    messagePage: messageReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    app: appReducer\r\n})\r\n\r\nexport type AppStateType = ReturnType<typeof reducers>\r\n\r\nexport type AppActionType = AuthActionType | MessageReducerActionsTypes | ProfileReducersActionsTypes | UsersActionType // все экшны приложения\r\n\r\nlet store = createStore(reducers, applyMiddleware(thunkMiddleware))\r\nexport default store","import React from 'react';\r\nimport s from './Navbar.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\nconst  Navbar = () => {\r\n\r\n\r\n    return <nav className={s.nav}>\r\n    <div className={s.item}>\r\n    <NavLink to=\"/profile\" activeClassName={s.activeLink}>Profile</NavLink>\r\n        </div>\r\n        <div className={s.item}>\r\n    <NavLink to=\"/dialogs\" activeClassName={s.activeLink}>Dialogs</NavLink>\r\n        </div>\r\n        <div className={s.item}>\r\n            <NavLink to=\"/users\" activeClassName={s.activeLink}>Users</NavLink>\r\n        </div>\r\n        <div className={s.item}>\r\n    <NavLink to=\"/news\">News</NavLink>\r\n        </div>\r\n        <div className={s.item}>\r\n    <NavLink to=\"/music\">Music</NavLink>\r\n        </div>\r\n        <div className={s.item}>\r\n    <NavLink to=\"/setting\">Settings</NavLink>\r\n        </div>\r\n        </nav>\r\n}\r\n\r\nexport default Navbar;","import React from 'react';\r\nimport s from './../Dialogs.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\ntype DialogItemType = {\r\n    name: string\r\n    id: number\r\n}\r\n\r\nconst DialogItem = (props: DialogItemType) => {\r\n    let path = \"/dislogs/\" + props.id\r\n    return <div className={s.dialog + ' ' + s.active}>\r\n        <NavLink to={path}>{props.name}</NavLink>\r\n    </div>\r\n}\r\n\r\n\r\nexport default DialogItem;","import React from 'react';\r\nimport s from './../Dialogs.module.css'\r\n\r\n\r\ntype messageType = {\r\n    message: string\r\n}\r\n\r\nconst Message = (props: messageType) => {\r\n\r\n\r\n    return (\r\n\r\n        <div className={s.dialog}>\r\n            {props.message}\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Message;","import s from \"./FormControls.module.css\";\r\n\r\n\r\nexport const Textarea = ({input, meta, ...props}: any) => { // достаём целиком инпут, ммета, а оставшиеся штуки оставить в пропсах\r\n\r\n    const hasError = meta.touched && meta.error\r\n\r\n    return (\r\n        <div className={s.formControl + \" \" + (hasError ? s.error : \"\")}>\r\n            <div >\r\n                <textarea {...input} {...props}/>\r\n            </div>\r\n            {hasError && <span>{meta.error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport const Input = ({input, meta, ...props}: any) => { // достаём целиком инпут, ммета, а оставшиеся штуки оставить в пропсах\r\n\r\n    const hasError = meta.touched && meta.error\r\n\r\n    return (\r\n        <div className={s.formControl + \"\" + (hasError ? s.error : \"\")}>\r\n            <div>\r\n                <input {...input} {...props}/>\r\n            </div>\r\n            {hasError && <span>{meta.error}</span>}\r\n        </div>\r\n    )\r\n}","\r\n\r\nexport const required = (value: string) => {\r\n    if (value) return undefined\r\n\r\n    return \"Field is required\"\r\n}\r\n\r\nexport const maxLenghtCreator = (maxLength: number) => (value: string) => {\r\n    if (value.length > maxLength) return `Max lenght is ${maxLength} symbols`\r\n    return undefined\r\n}","import React from \"react\";\r\nimport s from \"./Dialogs.module.css\"\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {MessagePageType} from \"../../redux/message-reducer\";\r\nimport {reduxForm} from \"redux-form\";\r\nimport {AddMessageForm} from \"./AddMessageForm/AddMessageForm\";\r\n\r\n\r\ntype MyDialogsType = {\r\n    updateNewMessageBody: (onNewMessageBody: string) => void\r\n    messagePage: MessagePageType\r\n\r\n}\r\n\r\nexport type DialogsFormType = {\r\n    onNewMessageBody: string\r\n}\r\n\r\nconst AddMessageFormRedux = reduxForm<DialogsFormType>({form: 'dialogAddMessageForm'})(AddMessageForm)\r\n\r\n\r\nconst Dialogs = (props: MyDialogsType) => {\r\n\r\n\r\n    let dialogElements = props.messagePage.dialogs.map(dialog =>\r\n        <DialogItem name={dialog.name} id={dialog.id} key={dialog.id}/>\r\n    )\r\n\r\n\r\n    let messageElement = props.messagePage.messages.map(message =>\r\n        <Message message={message.message} key={message.id}/>\r\n    )\r\n\r\n\r\n\r\n\r\n    const addNewMessage = (value: DialogsFormType) => {\r\n        props.updateNewMessageBody(value.onNewMessageBody)\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>{messageElement}</div>\r\n                <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n                {/*<div>*/}\r\n                {/*    <div><textarea placeholder=\"Enter your message\" onChange={onNewMessageChange}*/}\r\n                {/*                   value={onNewMessageBody}/></div>*/}\r\n                {/*    <div>*/}\r\n                {/*        <button onClick={onSendMessageClick}>Send</button>*/}\r\n                {/*    </div>*/}\r\n                {/*</div>*/}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Dialogs","import React from \"react\";\r\nimport {Field, InjectedFormProps} from \"redux-form\";\r\nimport {Textarea} from \"../../Common/FormsControls/FormsControls\";\r\nimport {required} from \"../../../utilits/validators/validators\";\r\nimport {DialogsFormType} from \"../Dialogs\";\r\n\r\nexport const AddMessageForm: React.FC<InjectedFormProps<DialogsFormType>> = (props) => {\r\n    return <div>\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field placeholder={\"Enter your message\"} name={\"onNewMessageBody\"} component={Textarea}\r\n                       validate={[required]}/>\r\n            </div>\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    </div>\r\n}","import React from 'react';\r\nimport {AppStateType} from \"../redux/redux-store\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {ComponentType} from \"react\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n    class RedirectComponent extends React.Component<MapStatePropsType> {\r\n\r\n        render() {\r\n            let {isAuth, ...restProps} = this.props\r\n            if (!isAuth) return <Redirect to={'/login'}/>\r\n            return <Component {...restProps as T}/>\r\n        }\r\n    }\r\n\r\n    let ConnectRedirectComponent = connect(mapStateToProps)(RedirectComponent)\r\n    return ConnectRedirectComponent\r\n\r\n}\r\n","import React, {ChangeEvent} from \"react\";\r\nimport {sendMessageCreator} from \"../../redux/message-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {getUserProfile} from \"../../redux/profile-reducer\";\r\n\r\n//\r\n// type MyDialogsType = {\r\n//     // data: MessagePageType\r\n//     // dispatch: (action: ActionsTypes) => void\r\n//     // newMessageBody: string\r\n//\r\n//     store: ForReduxStoreType\r\n//\r\n//\r\n// }\r\n//\r\n// const DialogsContainer = (props: MyDialogsType) => {\r\n//\r\n//     let state = props.store.getState()\r\n//\r\n//     const onSendMessageClick = () => {\r\n//         props.store.dispatch(sendMessageCreator())\r\n//     }\r\n//\r\n//     const onNewMessageChange = (body: string) => {\r\n//         props.store.dispatch(updateNewMessageBodyCreator(body))\r\n//     }\r\n//\r\n//\r\n//     return <Dialogs updateNewMessageBody={onSendMessageClick}\r\n//                     sendMessage={onNewMessageChange}\r\n//                     messagePage={state.messagePage}\r\n//         // newMessageBody={state.newMessageBody}\r\n//         // data={props.data}\r\n//         //             newMessageBody={state.messagePage.newMessageBody}\r\n//         //             data={state.messagePage}\r\n//     />\r\n// }\r\n    let mapStateToProps = (state: AppStateType) => {\r\n        return {\r\n            messagePage: state.messagePage,\r\n            // isAuth: state.auth.isAuth\r\n        }\r\n    }\r\n\r\n    let mapDispatchToProps = (dispatch: Dispatch) => {\r\n        return {\r\n            updateNewMessageBody: (onNewMessageBody: string) => {     //из dialogs приходит newMessageBody, потом newMessageBody диспатчим в action creator, а он изменяет стейт\r\n                dispatch(sendMessageCreator(onNewMessageBody))\r\n            },\r\n            // sendMessage: (body: string) => {\r\n            //     dispatch(updateNewMessageBodyCreator(body))\r\n            // }\r\n        }\r\n    }\r\n\r\nexport default compose<React.ComponentType>(                                              ///это вместо нижележащего\r\n    connect(mapStateToProps,mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs)\r\n// let AuthRedirectComponent = withAuthRedirect(Dialogs)\r\n//\r\n// const DialogsContainer = connect(mapStateToProps,mapDispatchToProps) (AuthRedirectComponent)\r\n//\r\n//\r\n// export default DialogsContainer","import React, {ChangeEvent, useEffect, useState} from 'react'\r\n\r\n\r\ntype ProfileStatusType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\n\r\nconst ProfileStatus = (props: ProfileStatusType) => {\r\n\r\n\r\n    let [newstatus, setNewStatus] = useState(props.status)\r\n    let [editMode, setEditMode] = useState(false)\r\n\r\n\r\n    const onClickChangeStatus = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const afterChangeStatus = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(newstatus)\r\n    }\r\n\r\n    const onChangeStatus = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setNewStatus(e.currentTarget.value)\r\n    }\r\n\r\n    useEffect(() => {\r\n            setNewStatus(props.status)\r\n        }, [props.status]\r\n    )\r\n\r\n\r\n    return (<div>\r\n            {!editMode &&\r\n            <div>\r\n                <span onClick={onClickChangeStatus}>{props.status || \"no status\"}</span>\r\n            </div>\r\n            }\r\n            {editMode &&\r\n            <div>\r\n                <input onChange={onChangeStatus}\r\n                       autoFocus={true}\r\n                       onBlur={afterChangeStatus}\r\n                       value={newstatus}/>\r\n            </div>\r\n            }\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileStatus;\r\n\r\nfunction componentDidUpdate() {\r\n    throw new Error('Function not implemented.')\r\n}\r\n","import React from 'react'\r\nimport s from '././ProfileInfo.module.css';\r\nimport {ProfileType} from \"../../../redux/profile-reducer\";\r\nimport ProfileStatus from \"./ProfileStatus\";\r\nimport Preloader from \"../../Common/Preloader\";\r\n\r\n\r\ntype ProfileInfoComponentType = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n\r\n}\r\n\r\n\r\nconst ProfileInfo = (props: ProfileInfoComponentType) => {\r\n    // if (!props.profile) {\r\n    //    return <Preloader/>\r\n    // }\r\n\r\n    return (<div>\r\n            <img\r\n                src='https://sun9-74.userapi.com/impf/CfedXY_0pC5iWwNhFedBDHyJk54SvRY9BDBBWg/3tT19xmRo_8.jpg?size=1280x960&quality=96&sign=0fbbf1bcf2ea3c479bfcad8c3ff85128&type=album'/>\r\n            <div className={s.descriptionBlock}>\r\n                <img src={props.profile.photos.large}/>\r\n                {props.profile.contacts.twitter}\r\n                {props.profile.userId}\r\n            </div>\r\n            <ProfileStatus status={props.status} updateStatus={props.updateStatus}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\n\r\ntype PostType = {\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\nconst Post = (props: PostType) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img src='https://images-na.ssl-images-amazon.com/images/I/61IkrxQ9p8L._AC_SL1500_.jpg'/>\r\n            {props.message}\r\n            <div>\r\n                <span>likes</span> {props.likesCount}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;","import Post from \"./Post\";\r\nimport {PostsType} from \"../../../../redux/profile-reducer\";\r\nimport s from './MyPosts.module.css';\r\nimport React from \"react\";\r\nimport  {Field,InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../../../Common/FormsControls/FormsControls\";\r\nimport {maxLenghtCreator, required} from \"../../../../utilits/validators/validators\";\r\n\r\n\r\ntype MyPostsType = {\r\n    post: Array<PostsType>\r\n    addPost: (newPostText: string) => void\r\n\r\n}\r\n\r\nexport type PostFormType = {\r\n    newPostText: string\r\n}\r\n\r\nconst maxLength10 = maxLenghtCreator(10)\r\n\r\nconst MyPosts = (props: MyPostsType) => {\r\n\r\n\r\n    let postsElement = props.post.map(p =>\r\n        <Post message={p.message} likesCount={p.likesCount}/>\r\n    )\r\n\r\n\r\n    const onAddPost = (value: PostFormType) => {\r\n        props.addPost(value.newPostText)\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h2>My posts</h2>\r\n            <AddNewPost onSubmit={onAddPost}/>\r\n            <div className={s.posts}>\r\n                {postsElement}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst AddNewPostForm: React.FC<InjectedFormProps<PostFormType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field name={\"newPostText\"} component={Textarea} placeholder={\"enter new post\"}\r\n                       validate={[required, maxLength10]}/>\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddNewPost = reduxForm<PostFormType>({form: \"ProfileAddNewPostForm\"})(AddNewPostForm)\r\n\r\n\r\n\r\nexport default MyPosts;","import {addPostActionCreator} from \"../../../../redux/profile-reducer\";\r\nimport React from \"react\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppStateType} from \"../../../../redux/redux-store\";\r\n\r\n//\r\n// type MyPostsType = {\r\n//     // post: ProfilePageType\r\n//     // newPostText: string\r\n//     // dispatch: (action: ActionsTypes) => void\r\n//\r\n//     store: ForReduxStoreType\r\n// }\r\n//\r\n//\r\n// const MyPostsContainer = (props: MyPostsType) => {\r\n//\r\n//     let state = props.store.getState()\r\n//\r\n//     const addPost = () => {\r\n//         props.store.dispatch(addPostActionCreator())\r\n//     }\r\n//\r\n//     const onPostChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n//         props.store.dispatch(updateNewPostTextActionCreator(e.currentTarget.value))\r\n//     }\r\n//\r\n//\r\n//     return <MyPosts updateNewPostText={onPostChange}\r\n//                     post={state.profilePage.posts}\r\n//                     newPostText={state.profilePage.newPostText}\r\n//                     addPost={addPost}/>\r\n// }\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        post: state.profilePage.posts,\r\n        // newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch) => {\r\n    return {\r\n        addPost: (newPostText: string) => {\r\n            dispatch(addPostActionCreator(newPostText))\r\n        }\r\n    }\r\n}\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\n\r\n\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport ProfileInfo from \"../ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"../MyPosts/Post/MyPostsContainer\";\r\nimport {ProfileType} from \"../../../redux/profile-reducer\";\r\n\r\ntype ProfileComponentType = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n\r\n}\r\n\r\nconst Profile = (props: ProfileComponentType) => {\r\n\r\n\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={props.profile} status={props.status} updateStatus={props.updateStatus}/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\nimport Profile from \"./Profile\";\r\nimport {getUserProfile, getUserStatus, ProfileType, updateStatus} from \"../../../redux/profile-reducer\";\r\nimport { RouteComponentProps, withRouter} from 'react-router-dom';\r\nimport {withAuthRedirect} from \"../../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\nexport type ProfileContainerType = {\r\n    profile: ProfileType\r\n    // setUserProfile: (profile: ProfileType) => void\r\n    getUserProfile: (userID: number) => void\r\n    isAuth: boolean\r\n    getUserStatus: (userID: number) => void\r\n    updateStatus: (status: string) => void\r\n    status: string\r\n    autorizedUserID: number\r\n\r\n}\r\n\r\nexport type MapStatePropsType = {\r\n    profile: ProfileType\r\n    // userStatus: string\r\n    status: string\r\n    autorizedUserID: number\r\n}\r\n\r\nexport type PathParamsType = {\r\n    userId:  any\r\n}\r\n\r\nexport type OwnPropsType = ProfileContainerType\r\nexport type OwnProfileContainerType = RouteComponentProps<PathParamsType> & OwnPropsType\r\n\r\nclass ProfileContainer extends React.Component<OwnProfileContainerType> {\r\n\r\n\r\n    componentDidMount() {\r\n\r\n        let userId = this.props.match.params.userId\r\n        console.log(this.props.match.params.userId)\r\n        if (!userId) {\r\n            userId = this.props.autorizedUserID\r\n        }\r\n        this.props.getUserProfile(userId)\r\n        this.props.getUserStatus(userId)\r\n        // axios.get(`https://social-network.samuraijs.com/api/1.0/profile/` + userId)\r\n        //     .then(response => {\r\n        //         this.props.setUserProfile(response.data)\r\n        //     })\r\n    }\r\n\r\n    render() {\r\n\r\n        // if (!this.props.isAuth) return <Redirect to={\"/login\"}/>     //(this.props.isAuth===false)\r\n        // если не залогинены - попадаем на страницу /login\r\n        return <>\r\n\r\n            <Profile {...this.props} profile={this.props.profile} status={this.props.status}\r\n                     updateStatus={this.props.updateStatus}/>\r\n        </>\r\n    }\r\n}\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    autorizedUserID: state.auth.userId\r\n\r\n})\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps,\r\n        {getUserProfile, getUserStatus, updateStatus}),\r\n    // withAuthRedirect,\r\n    withRouter\r\n)(ProfileContainer)\r\n\r\n// let WithUrlDataContainerComponent = withRouter(ProfileContainer)\r\n//\r\n// // const UsersContainer = connect(mapStateToProps, { setUserProfile})(UsersСontainer)\r\n//\r\n// export default withAuthRedirect(connect(mapStateToProps,\r\n//     // {setUserProfile},\r\n//     {getUserProfile})(WithUrlDataContainerComponent))\r\n//\r\n// // export default connect(mapStateToProps,\r\n// //     // {setUserProfile},\r\n// //     {getUserProfile})(WithUrlDataContainerComponent)","import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport s from './Header.module.css';\r\n\r\ntype HeaderAuthType = {\r\n    login: string\r\n    isAuth: boolean\r\n    logout: () => void\r\n}\r\n\r\nconst Header = (props: HeaderAuthType) => {\r\n\r\n\r\n    return <header className={s.header}>\r\n        <img src='https://s.starladder.com/uploads/team_logo/7/7/c/1/thumb_270_2eb66ca0fa0345cc85ad134e7bad0789.jpeg'/>\r\n        <div className={s.loginBlock}>\r\n            {props.isAuth\r\n                ? <div>{props.login}-<button onClick={props.logout}>Logout</button></div>: <NavLink to={\"/login\"}>Login</NavLink>}\r\n        </div>\r\n    </header>\r\n\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport Header from \"./Header\";\r\nimport axios from \"axios\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\nimport {getAuthUserData, logout, setAuthUserData} from \"../../redux/auth-reducer\";\r\n\r\n\r\ntype UsersComponentType = {\r\n    isAuth: boolean\r\n    login: string\r\n    // setAuthUserData: (id: number, email: string, login: string) => void\r\n\r\n    logout: () => void\r\n\r\n}\r\n\r\nclass HeaderContainer extends React.Component<UsersComponentType> {\r\n\r\n    // componentDidMount() {\r\n    //     this.props.getAuthUserData()\r\n\r\n        //     axios.get(`https://social-network.samuraijs.com/api/1.0/auth/me`, {\r\n        //         withCredentials: true // проверяем авторизованы ли мы\r\n        //     })\r\n        //         .then(response => {\r\n        //             if (response.data.resultCode === 0) {\r\n        //                 let {id, email, login} = response.data.data\r\n        //                 this.props.setAuthUserData(id, email, login)\r\n        //             }\r\n        //         })\r\n\r\n\r\n    render() {\r\n        return <Header {...this.props} />;\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        login: state.auth.login,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, { logout})(HeaderContainer)\r\n\r\n","import React from 'react';\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Input} from \"../Common/FormsControls/FormsControls\";\r\nimport {required} from \"../../utilits/validators/validators\";\r\nimport {connect} from \"react-redux\";\r\nimport {login} from \"../../redux/auth-reducer\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport s from \"../Common/FormsControls/FormControls.module.css\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\n\r\ntype FormDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    login: (email: string, password: string, rememberMe: boolean) => void\r\n\r\n}\r\n\r\ntype LoginType = {\r\n    login: (email: string, password: string, rememberMe: boolean) => void\r\n    isAuth: boolean\r\n}\r\n\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return <div>\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field placeholder={\"email\"} name={\"email\"} component={Input} validate={[required]}/>\r\n            </div>\r\n            <div>\r\n                <Field placeholder={\"Password\"} name={\"password\"} component={Input} type={\"password\"}\r\n                       validate={[required]}/>\r\n            </div>\r\n            <div>\r\n                <Field type={\"checkbox\"} component={Input} name={\"remember me\"}/> remember me\r\n            </div>\r\n            {props.error && <div className={s.formSummaryError}> {props.error}\r\n            </div>}\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    </div>\r\n}\r\n\r\nconst LoginReduxForm = reduxForm<FormDataType>({form: 'login'})(LoginForm)\r\n\r\nconst Login = (props: LoginType) => {\r\n    const onSubmit = (formData: FormDataType) => {\r\n        props.login(formData.email, formData.password, formData.rememberMe)\r\n    }\r\n\r\n    if (props.isAuth) {\r\n        return <Redirect to={'/profile'}/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>THIS LOGIN</h1>\r\n            <LoginReduxForm onSubmit={onSubmit}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {login})(Login)","import loader from '../../assets/images/loader.png'\r\n\r\nconst Preloader = () =>{\r\n    return <div>\r\n        <img src={loader}/>\r\n    </div>\r\n\r\n}\r\n\r\nexport default Preloader","import './App.css';\r\nimport React from 'react';\r\nimport Navbar from \"./components/Navbar/Navbar\";\r\nimport {BrowserRouter, Route, withRouter} from \"react-router-dom\";\r\nimport DialogsContainer from \"./components/Dialogs/DialogsContainer\";\r\nimport ProfileContainer from \"./components/Profile/Profile/ProfileContainer\";\r\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\r\nimport LoginPage from \"./components/Login/Login\";\r\nimport {connect} from \"react-redux\";\r\nimport {initializeApp} from \"./redux/app-reducer\";\r\nimport {AppStateType} from \"./redux/redux-store\";\r\nimport Preloader from \"./components/Common/Preloader\";\r\nimport {withSuspense} from \"./hoc/withSuspense\";\r\n// import UsersСontainerFC from \"./components/Users/UserContainerFC\";\r\n\r\n\r\ntype getUserAppType = {\r\n    initializeApp: () => void\r\n    initialized: boolean\r\n}\r\n\r\nconst UsersContainerFC = React.lazy(()=> import (\"./components/Users/UserContainerFC\"));\r\n\r\nclass App extends React.Component<getUserAppType> {\r\n\r\n    componentDidMount() {\r\n        this.props.initializeApp()\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.initialized) {\r\n            return <Preloader/>\r\n        }\r\n\r\n\r\n        return (\r\n            <BrowserRouter>\r\n                <div className='app-wrapper'>\r\n                    <HeaderContainer/>\r\n                    <Navbar/>\r\n                    <div className='app-wrapper-content'>\r\n                        <Route path='/dialogs'\r\n                               render={() => <DialogsContainer/>}/>\r\n                        <Route path='/profile/:userId?'\r\n                               render={() => <ProfileContainer/>}/>\r\n                        <Route path='/users'\r\n                               render={withSuspense(UsersContainerFC)}/>\r\n\r\n                        <Route path='/login'\r\n                               render={() => <LoginPage/>}/>\r\n                    </div>\r\n                </div>\r\n            </BrowserRouter>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        initialized: state.app.initialized\r\n    }\r\n}\r\n\r\nexport default connect ( mapStateToProps, {initializeApp}) (App)\r\n","import React, {ComponentType} from 'react';\r\n\r\n\r\nexport function withSuspense<T>(Component: ComponentType<T>) {\r\n    return (props: any) => {\r\n        return <React.Suspense fallback={<div>Loading...</div>}>\r\n            <Component {...props as T}/>\r\n        </React.Suspense>\r\n    }\r\n}\r\n\r\n\r\n","import React from 'react';\nimport './index.css';\nimport store from \"./redux/redux-store\";\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {BrowserRouter} from \"react-router-dom\";\n// import {Provider} from \"./StoreContext\";\nimport {Provider} from \"react-redux\";\n\n\n\n    ReactDOM.render(\n        <BrowserRouter>\n            <Provider  store={store}>\n            <App   />\n            </Provider>\n        </BrowserRouter>,\n        document.getElementById('root')\n    );\n\n\n// rerenderEntireTree()\n\n//перерисуем всё дерево\n// store.subscribe(rerenderEntireTree)\n//\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormControls_formControl__1v_a6\",\"error\":\"FormControls_error__3no1B\",\"good\":\"FormControls_good__3RpN1\",\"formSummaryError\":\"FormControls_formSummaryError__1K1bZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__1Mb9G\",\"posts\":\"MyPosts_posts__2G0xM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__22OBh\",\"loginBlock\":\"Header_loginBlock__273nC\"};","import {usersAPI} from \"../api/api\";\r\nimport {Dispatch} from \"redux\";\r\n\r\nlet initialState = {\r\n    users: [],\r\n    pageSize: 5,\r\n    totalUsersCount: 25,\r\n    currentPage: 1,  ///cо старта будет страница номер 1\r\n    isFatching: true,\r\n    followingInProgress: [],\r\n    portionSize: 10\r\n}\r\n\r\nexport type UsersStateType = {\r\n    users: Array<UsersType>,\r\n    pageSize: number,\r\n    totalUsersCount: number,\r\n    currentPage: number,\r\n    isFatching: boolean,\r\n    followingInProgress: Array<FollowingProgressType>,\r\n    portionSize: number\r\n}\r\n\r\nexport type UsersType = {\r\n    id: number,\r\n    photos: {\r\n        small: string,\r\n        large: string\r\n    },\r\n    followed: boolean,\r\n    name: string,\r\n    status: string,\r\n    location: LocationUsersType\r\n}\r\n\r\nexport type LocationUsersType = {\r\n    city: string,\r\n    country: string\r\n}\r\n\r\nexport type FollowingProgressType = {}\r\n\r\nconst usersReducer = (state: UsersStateType = initialState, action: UsersActionType): UsersStateType => {\r\n    switch (action.type) {\r\n        case \"FOLLOW\":\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: true}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n        case \"UNFOLLOW\":\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: false}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n        case \"SET-USERS\":\r\n            return {...state, users: action.users}\r\n        case \"SET-CURRENT-PAGE\":\r\n            return {...state, currentPage: action.currentPage}\r\n        case \"SET-TOTAL-USERS-COUNT\":\r\n            return {...state, totalUsersCount: action.totalUsersCount}\r\n        case \"TOGGLE-IS-FETCHING\":\r\n            return {...state, isFatching: action.isFatching}\r\n        case \"TOGGLE-IS-FOLLOWING-PROGRESS\":\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFatching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(id => id != action.userId)\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport type UsersActionType =\r\n    ReturnType<typeof followSuccess>\r\n    | ReturnType<typeof unfollowSuccess>\r\n    | ReturnType<typeof setusers>\r\n    | ReturnType<typeof setCurrentPage>\r\n    | ReturnType<typeof setTotalUsersCount>\r\n    | ReturnType<typeof toggleIsFatching>\r\n    | ReturnType<typeof toggleFollowingProgress>\r\n\r\n\r\nconst FOLLOW = \"FOLLOW\";\r\nconst UNFOLLOW = \"UNFOLLOW\";\r\nconst SET_USERS = \"SET-USERS\";\r\nconst SET_CURRENT_PAGE = \"SET-CURRENT-PAGE\";\r\nconst SET_USER_TOTAL_COUNT = \"SET-TOTAL-USERS-COUNT\";\r\nconst TOGGLE_IS_FETCHING = \"TOGGLE-IS-FETCHING\";\r\nconst TOGGLE_IS_FOLLOWING_PROGRESS = \"TOGGLE-IS-FOLLOWING-PROGRESS\";\r\n\r\n\r\nexport const followSuccess = (userId: number) => {\r\n    return {\r\n        type: FOLLOW, userId\r\n    } as const\r\n}\r\n\r\nexport const unfollowSuccess = (userId: number) => {\r\n    return {\r\n        type: UNFOLLOW, userId\r\n    } as const\r\n}\r\n\r\nexport const setusers = (users: Array<UsersType>) => {\r\n    return {\r\n        type: SET_USERS, users\r\n    } as const\r\n}\r\n\r\nexport const setCurrentPage = (currentPage: number) => {\r\n    return {\r\n        type: SET_CURRENT_PAGE, currentPage\r\n    } as const\r\n}\r\n\r\nexport const setTotalUsersCount = (totalUsersCount: number) => {\r\n    return {\r\n        type: SET_USER_TOTAL_COUNT, totalUsersCount\r\n    } as const\r\n}\r\n\r\nexport const toggleIsFatching = (isFatching: boolean) => {\r\n    return {\r\n        type: TOGGLE_IS_FETCHING, isFatching\r\n    } as const\r\n}\r\n\r\nexport const toggleFollowingProgress = (isFatching: boolean, userId: number) => {\r\n    return {\r\n        type: TOGGLE_IS_FOLLOWING_PROGRESS, isFatching, userId\r\n    } as const\r\n}\r\n\r\nexport const getUsers = (currentPage: number, pageSize: number) => {\r\n    return async (dispatch: Dispatch) => {\r\n        dispatch(toggleIsFatching(true))\r\n        dispatch(setCurrentPage(currentPage))//для отрисовки циферки выбранной страницы\r\n        let data = await usersAPI.getUsers(currentPage, pageSize)\r\n        dispatch(toggleIsFatching(false))\r\n        dispatch(setusers(data.items))\r\n        dispatch(setTotalUsersCount(data.totalCount))\r\n    }\r\n}\r\n\r\nexport const follow = (userId: number) => {\r\n    return async (dispatch: Dispatch) => {\r\n        dispatch(toggleFollowingProgress(true, userId))\r\n        let response = await usersAPI.follow(userId)\r\n        if (response.data.resultCode == 0) {\r\n            dispatch(followSuccess(userId))\r\n        }\r\n        dispatch(toggleFollowingProgress(false, userId))\r\n\r\n    }\r\n}\r\n\r\nexport const unfollow = (userId: number) => {\r\n    return async (dispatch: Dispatch) => {\r\n        dispatch(toggleFollowingProgress(true, userId))\r\n        let response = await usersAPI.unfollow(userId)\r\n        if (response.data.resultCode == 0) {\r\n            dispatch(unfollowSuccess(userId))\r\n        }\r\n        dispatch(toggleFollowingProgress(false, userId))\r\n\r\n    }\r\n}\r\nexport default usersReducer"],"sourceRoot":""}