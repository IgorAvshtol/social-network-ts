{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/Post/MyPosts.module.css","redux/users-reducer.tsx","assets/images/loader.png","assets/images/users.jpg","components/Profile/MyPosts/Post/Post.module.css","api/api.ts","redux/profile-reducer.tsx","redux/message-reducer.tsx","redux/auth-reducer.tsx","redux/app-reducer.tsx","redux/redux-store.tsx","components/Common/Preloader.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Common/FormsControls/FormsControls.tsx","utilits/validators/validators.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/AddMessageForm/AddMessageForm.tsx","hoc/withAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx","components/Login/Login.tsx","components/Profile/ProfileInfo/ProfileStatus.tsx","components/Profile/ProfileInfo/ProfileData.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/Post/MyPosts.tsx","components/Profile/MyPosts/Post/MyPostsContainer.tsx","components/Profile/Profile/Profile.tsx","components/Profile/Profile/ProfileContainer.tsx","components/Header/Header.tsx","App.tsx","hoc/withSuspense.tsx","index.tsx","components/Dialogs/Dialogs.module.css","components/Common/FormsControls/FormControls.module.css"],"names":["module","exports","initialState","users","pageSize","totalUsersCount","currentPage","isFatching","followingInProgress","portionSize","followSuccess","userId","type","unfollowSuccess","setCurrentPage","toggleIsFatching","toggleFollowingProgress","getUsers","dispatch","a","usersAPI","data","items","totalCount","follow","resultCode","unfollow","usersReducer","state","action","map","u","id","followed","filter","instance","axios","create","withCredentials","baseURL","headers","get","then","response","userID","post","delete","getProfile","console","warn","profileAPI","getStatus","updateStatus","status","put","updateAvatar","photo","formData","FormData","append","saveProfile","profile","authAPI","me","login","email","password","rememberMe","logout","posts","message","likesCount","lookingForAJob","lookingForAJobDescription","fullName","aboutMe","contacts","github","vk","facebook","instagram","twitter","website","youtube","mainLink","photos","small","large","setStatus","setPhotoSuccess","getUserProfile","profileReducer","newPost","newPostText","messages","dialogs","name","messageReducer","body","newMessageBody","isAuth","setAuthUserData","getAuthUserData","authReducer","initialized","appReducer","reducers","combineReducers","profilePage","messagePage","usersPage","auth","form","formReducer","app","store","createStore","applyMiddleware","thunkMiddleware","Preloader","src","loader","DialogItem","props","path","className","s","dialog","active","to","Message","Textarea","input","meta","hasError","touched","error","formControl","Input","required","value","AddMessageFormRedux","reduxForm","onSubmit","handleSubmit","Field","placeholder","component","validate","Dialogs","dialogElements","messageElement","dialogsItems","updateNewMessageBody","onNewMessageBody","mapStateToProps","compose","connect","log","Component","RedirectComponent","this","restProps","React","LoginReduxForm","formSummaryError","errorMessage","length","stopSubmit","_error","ProfileStatus","useState","newstatus","setNewStatus","editMode","setEditMode","useEffect","onClick","onChange","e","currentTarget","autoFocus","onBlur","maxLength","ProfileData","isOwner","goToEditMode","ProfileDataForm","useDispatch","saveProfileData","getState","useSelector","initialValues","values","setSubmitting","offEditMode","isSubmitting","disabled","ProfileInfo","descriptionBlock","userPhoto","mainFoto","accept","target","files","Post","item","maxLength10","AddNewPost","MyPosts","postsElement","p","postsBlock","addPost","MyPostsContainer","addPostActionCreator","Profile","ProfileContainer","match","params","autorizedUserID","getUserStatus","withRouter","Header","Layout","style","backgroundColor","span","icon","UserOutlined","SubMenu","Menu","Content","Sider","UsersContainerFC","lazy","App","initializeApp","width","mode","defaultSelectedKeys","defaultOpenKeys","height","borderRight","title","Item","LaptopOutlined","padding","margin","minHeight","exact","render","DialogsContainer","Suspense","fallback","promise","Promise","all","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.fb14d4fe.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__5TaNc\",\"mainFoto\":\"ProfileInfo_mainFoto__2rNGT\",\"contact\":\"ProfileInfo_contact__Okcll\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__1Mb9G\",\"posts\":\"MyPosts_posts__2G0xM\"};","import {usersAPI} from \"../api/api\";\nimport {Dispatch} from \"redux\";\n\nlet initialState = {\n    users: [],\n    pageSize: 5,\n    totalUsersCount: 25,\n    currentPage: 1,  ///cо старта будет страница номер 1\n    isFatching: true,\n    followingInProgress: [],\n    portionSize: 10\n}\n\nexport type UsersStateType = {\n    users: Array<UsersType>,\n    pageSize: number,\n    totalUsersCount: number,\n    currentPage: number,\n    isFatching: boolean,\n    followingInProgress: Array<FollowingProgressType>,\n    portionSize: number\n}\n\nexport type UsersType = {\n    id: number,\n    photos: {\n        small: string,\n        large: string\n    },\n    followed: boolean,\n    name: string,\n    status: string,\n    location: LocationUsersType\n}\n\nexport type LocationUsersType = {\n    city: string,\n    country: string\n}\n\nexport type FollowingProgressType = {}\n\nconst usersReducer = (state: UsersStateType = initialState, action: UsersActionType): UsersStateType => {\n    switch (action.type) {\n        case \"FOLLOW\":\n            return {\n                ...state,\n                users: state.users.map(u => {\n                    if (u.id === action.userId) {\n                        return {...u, followed: true}\n                    }\n                    return u\n                })\n            }\n        case \"UNFOLLOW\":\n            return {\n                ...state,\n                users: state.users.map(u => {\n                    if (u.id === action.userId) {\n                        return {...u, followed: false}\n                    }\n                    return u\n                })\n            }\n        case \"SET-USERS\":\n            return {...state, users: action.users}\n        case \"SET-CURRENT-PAGE\":\n            return {...state, currentPage: action.currentPage}\n        case \"SET-TOTAL-USERS-COUNT\":\n            return {...state, totalUsersCount: action.totalUsersCount}\n        case \"TOGGLE-IS-FETCHING\":\n            return {...state, isFatching: action.isFatching}\n        case \"TOGGLE-IS-FOLLOWING-PROGRESS\":\n            return {\n                ...state,\n                followingInProgress: action.isFatching\n                    ? [...state.followingInProgress, action.userId]\n                    : state.followingInProgress.filter(id => id != action.userId)\n            }\n        default:\n            return state\n    }\n}\n\n\nexport type UsersActionType =\n    ReturnType<typeof followSuccess>\n    | ReturnType<typeof unfollowSuccess>\n    | ReturnType<typeof setusers>\n    | ReturnType<typeof setCurrentPage>\n    | ReturnType<typeof setTotalUsersCount>\n    | ReturnType<typeof toggleIsFatching>\n    | ReturnType<typeof toggleFollowingProgress>\n\n\nconst FOLLOW = \"FOLLOW\";\nconst UNFOLLOW = \"UNFOLLOW\";\nconst SET_USERS = \"SET-USERS\";\nconst SET_CURRENT_PAGE = \"SET-CURRENT-PAGE\";\nconst SET_USER_TOTAL_COUNT = \"SET-TOTAL-USERS-COUNT\";\nconst TOGGLE_IS_FETCHING = \"TOGGLE-IS-FETCHING\";\nconst TOGGLE_IS_FOLLOWING_PROGRESS = \"TOGGLE-IS-FOLLOWING-PROGRESS\";\n\n\nexport const followSuccess = (userId: number) => {\n    return {\n        type: FOLLOW, userId\n    } as const\n}\n\nexport const unfollowSuccess = (userId: number) => {\n    return {\n        type: UNFOLLOW, userId\n    } as const\n}\n\nexport const setusers = (users: Array<UsersType>) => {\n    return {\n        type: SET_USERS, users\n    } as const\n}\n\nexport const setCurrentPage = (currentPage: number) => {\n    return {\n        type: SET_CURRENT_PAGE, currentPage\n    } as const\n}\n\nexport const setTotalUsersCount = (totalUsersCount: number) => {\n    return {\n        type: SET_USER_TOTAL_COUNT, totalUsersCount\n    } as const\n}\n\nexport const toggleIsFatching = (isFatching: boolean) => {\n    return {\n        type: TOGGLE_IS_FETCHING, isFatching\n    } as const\n}\n\nexport const toggleFollowingProgress = (isFatching: boolean, userId: number) => {\n    return {\n        type: TOGGLE_IS_FOLLOWING_PROGRESS, isFatching, userId\n    } as const\n}\n\nexport const getUsers = (currentPage: number, pageSize: number) => {\n    return async (dispatch: Dispatch) => {\n        dispatch(toggleIsFatching(true))\n        dispatch(setCurrentPage(currentPage))//для отрисовки циферки выбранной страницы\n        let data = await usersAPI.getUsers(currentPage, pageSize)\n        dispatch(toggleIsFatching(false))\n        dispatch(setusers(data.items))\n        dispatch(setTotalUsersCount(data.totalCount))\n    }\n}\n\nexport const follow = (userId: number) => {\n    return async (dispatch: Dispatch) => {\n        dispatch(toggleFollowingProgress(true, userId))\n        let response = await usersAPI.follow(userId)\n        if (response.data.resultCode == 0) {\n            dispatch(followSuccess(userId))\n        }\n        dispatch(toggleFollowingProgress(false, userId))\n\n    }\n}\n\nexport const unfollow = (userId: number) => {\n    return async (dispatch: Dispatch) => {\n        dispatch(toggleFollowingProgress(true, userId))\n        let response = await usersAPI.unfollow(userId)\n        if (response.data.resultCode == 0) {\n            dispatch(unfollowSuccess(userId))\n        }\n        dispatch(toggleFollowingProgress(false, userId))\n\n    }\n}\nexport default usersReducer","export default __webpack_public_path__ + \"static/media/loader.e61adeab.png\";","export default __webpack_public_path__ + \"static/media/users.ea27fa10.jpg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__3y8ny\"};","import axios from \"axios\";\n\nconst instance = axios.create({\n    withCredentials: true,\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\n    headers: {\n        \"API-KEY\": \"38c3a417-44c2-476d-ad1b-ea982c1c54f6\"\n    }\n})\n\nexport const usersAPI = {\n    getUsers(currentPage = 1, pageSize = 10) {\n        return instance.get(`users?page=${currentPage}&count=${pageSize}`)\n            .then(response => {\n                return response.data\n            })\n    },\n    follow(userID: number) {\n        return instance.post(`follow/${userID}`)\n\n    },\n    unfollow(userID: number) {\n        return instance.delete(`follow/${userID}`)\n\n    },\n    getProfile(userID: number) {                                          //Сделали так чтобы не переименовывать везде\n        console.warn(\"Obsolet method.Please, use profileAPI\")\n        return profileAPI.getProfile(userID)\n    }\n\n}\n\nexport const profileAPI = {\n    getProfile(userID: number) {\n        return instance.get(`profile/` + userID)\n    },\n    getStatus(userID: number) {\n        return instance.get(`profile/status/` + userID)\n    },\n    updateStatus(status: string) {\n        return instance.put(`profile/status/`, {status: status})  //потому что запрос \"put\" передаём body = тексту status\n    },\n    updateAvatar(photo: any) {\n        let formData = new FormData()\n        formData.append(\"image\", photo)\n        return instance.put(`profile/photo`, formData, {\n            headers: {\n                \"Content-Type\": \"multipart/form-data\"\n            }\n        })\n    },\n    saveProfile(profile: any) {\n        return instance.put(`profile`, profile)\n        console.log(profile);\n    }\n}\n\nexport const authAPI = {\n    me() {\n        return instance.get(`auth/me`)\n    },\n    login(email: string, password: string, rememberMe = false) {\n        return instance.post(`auth/login`, {email, password, rememberMe})\n    },\n    logout() {\n        return instance.delete(`auth/login`)\n    }\n}\n\n//староееееееееее\n// export const getUsers = (currentPage = 1, pageSize = 10) => {\n//    return axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${currentPage}&count=${pageSize}`,\n//         {\n//             withCredentials: true\n//         })\n//         .then(response => {\n//             return response.data\n//         })\n// }\n","import {Dispatch} from \"redux\";\nimport {profileAPI, usersAPI} from \"../api/api\";\n\n\nlet initialState = {\n    posts: [\n        {id: 1, message: 'Hi, how are you', likesCount: 1},\n        {id: 2, message: \"It's my first post\", likesCount: 1},\n    ],\n    // newPostText: \"\",\n    profile: {\n        userId: 0,\n        lookingForAJob: false,\n        lookingForAJobDescription: \"\",\n        fullName: \"\",\n        aboutMe:\"\",\n        contacts: {\n            github: \"\",\n            vk: \"\",\n            facebook: \"\",\n            instagram: \"\",\n            twitter: \"\",\n            website: \"\",\n            youtube: \"\",\n            mainLink: \"\",\n        },\n        photos: {\n            small: \"\",\n            large: \"\"\n        }\n    },\n    status: \"\"\n\n}\n\nexport type PostsType = {\n    id: number\n    message: any\n    likesCount: number\n}\n\n\nexport type ProfilePageType = {\n    posts: Array<PostsType>\n    profile: ProfileType\n    status: string\n}\n\nexport type ProfileType = {\n    userId: number\n    lookingForAJob: boolean\n    lookingForAJobDescription: string\n    fullName: string\n    aboutMe: string\n    contacts: {\n        github: string\n        vk: string\n        facebook: string\n        instagram: string\n        twitter: string\n        website: string\n        youtube: string\n        mainLink: string\n    }\n    photos: {\n        small: string\n        large: string\n    }\n}\n\n\nconst profileReducer = (state: ProfilePageType = initialState, action: ProfileReducersActionsTypes): ProfilePageType => {\n    switch (action.type) {\n        case \"ADD-POST\":\n            let newPost: PostsType = {\n                id: 5,\n                message: action.newPostText,\n                likesCount: 0\n            }\n            return {\n                ...state,\n                posts: [...state.posts, newPost],\n                // newPostText: \"\"\n            }\n        case \"SET-USER-PROFILE\": {\n            return {\n                ...state,\n                profile: action.profile,\n            }\n        }\n        case \"SET-STATUS\": {\n            return {\n                ...state,\n                status: action.status,\n            }\n        }\n        case \"SET-PHOTO-SUCCESS\": {\n            return {\n                ...state,\n                profile: {...state.profile, photos: action.photos}\n            }\n        }\n        default:\n            return state\n    }\n}\n\n\nconst ADD_POST = \"ADD-POST\";\nconst SET_USER_PROFILE = \"SET-USER-PROFILE\";\nconst SET_STATUS = \"SET-STATUS\";\nconst SET_PHOTO_SUCCESS = \"SET-PHOTO-SUCCESS\"\n\nexport type ProfileReducersActionsTypes =\n    ReturnType<typeof addPostActionCreator>\n    | ReturnType<typeof setUserProfile>\n    | ReturnType<typeof setStatus>\n    | ReturnType<typeof setPhotoSuccess>\n\n\nexport const addPostActionCreator = (newPostText: string) => {\n    return {\n        type: ADD_POST, newPostText\n    } as const\n}\n\n\nexport const setUserProfile = (profile: ProfileType) => {\n    return {\n        type: SET_USER_PROFILE,\n        profile\n    } as const\n}\n\n\nexport const setStatus = (status: string) => {\n    return {\n        type: SET_STATUS,\n        status\n    } as const\n}\n\nexport const setPhotoSuccess = (photos: any) => {\n    return {\n        type: SET_PHOTO_SUCCESS,\n        photos\n    } as const\n}\n\nexport const getUserProfile = (userID: number) => {\n    return async (dispatch: Dispatch) => {\n        let response = await usersAPI.getProfile(userID) //Ключевое слово await заставит интерпретатор JavaScript ждать до тех пор, пока промис справа от await не выполнится. После чего оно вернёт его результат, и выполнение кода продолжится.\n        if (response.status === 200) {\n            dispatch(setUserProfile(response.data))\n        }\n    }\n}\n\n// export const getUserProfile = (userID: number) => {\n//     return (dispatch: Dispatch) => {\n//         usersAPI.getProfile(userID).then(response => {\n//             if (response.status === 200) {\n//                 dispatch(setUserProfile(response.data))\n//             }\n//         })\n//     }\n// }\n\nexport const getUserStatus = (userID: number) => {\n    return async (dispatch: Dispatch) => {\n        let response = await profileAPI.getStatus(userID)\n        dispatch(setStatus(response.data))\n    }\n}\n\nexport const updateStatus = (status: string) => {\n    return async (dispatch: Dispatch) => {\n        let response = await profileAPI.updateStatus(status)\n        if (response.data.resultCode === 0) {\n            dispatch(setStatus(status))\n        }\n    }\n}\n\nexport const updateAvatar = (photos: any) => {\n    return async (dispatch: Dispatch) => {\n        let response = await profileAPI.updateAvatar(photos)\n        if (response.data.resultCode === 0) {\n            dispatch(setPhotoSuccess(response.data.data.photos))\n        }\n    }\n}\n\nexport const saveProfile = (profile: any) => {\n    return async (dispatch: Dispatch<any>, getState: any) => {\n        // const userId = useSelector<AppStateType, any>(state => state.auth.userId)\n        const userId = getState().auth.userId\n        let response = await profileAPI.saveProfile(profile)\n        console.log(profile);\n        if (response.data.resultCode === 0) {\n            dispatch(getUserProfile(userId))\n        }\n    }\n}\n\nexport default profileReducer","import {ProfilePageType} from \"./profile-reducer\";\n\n\nlet initialState = {\n    messages: [\n        {id: 1, message: 'Make America Great Again'},\n        {id: 2, message: 'Show your gun'},\n        {id: 3, message: 'Are you gansters?'},\n    ],\n    dialogs: [\n        {id: 1, name: 'Trump'},\n        {id: 2, name: 'Biden'},\n        {id: 4, name: 'Bush'},\n        {id: 3, name: 'Abama'},\n    ]\n}\n\ntype MessageType = {\n    id: number\n    message: string\n}\n\ntype DialogsType = {\n    id: number\n    name: string\n}\n\n\n\nexport type MessagePageType = {\n    messages: Array<MessageType>\n    dialogs: Array<DialogsType>\n}\n\n\nexport type RootStateType = {\n    profilePage: ProfilePageType\n    messagePage: MessagePageType\n    sidebar?: string\n}\n\nconst messageReducer = (state: MessagePageType = initialState, action: MessageReducerActionsTypes) => {\n\n\n    switch (action.type) {\n        case \"SEND-MESSAGE\": {\n            let body = action.newMessageBody\n            return {\n                ...state,\n                messages: [...state.messages, {id: 6, message: body}]\n            }\n        }\n        default:\n            return state\n    }\n\n}\n\nexport default messageReducer\n\n\nconst SEND_MESSAGE = \"SEND-MESSAGE\";\n\n\nexport type MessageReducerActionsTypes =\n    ReturnType<typeof sendMessageCreator>\n\n\nexport const sendMessageCreator = (newMessageBody: string) => {\n    console.log(newMessageBody);\n    return {\n        type: SEND_MESSAGE, newMessageBody\n\n    } as const\n}\n\n","import {Dispatch} from \"redux\";\nimport {authAPI} from \"../api/api\";\nimport {stopSubmit} from \"redux-form\";\n\n\nlet initialState = {\n    userId: 10940,\n    email: \"\",\n    login: \"\",\n    isAuth: false,\n    password: \"\",\n    rememberMe: false\n}\n\ntype UsersStateType = {\n    userId: number,\n    email: string,\n    login: string,\n    isAuth: boolean,\n    password: string,\n    rememberMe: boolean\n}\n\nexport type LoginType = {\n    email: string,\n    password: string,\n    rememberMe: boolean\n}\n\nconst authReducer = (state: UsersStateType = initialState, action: AuthActionType): UsersStateType => {\n    switch (action.type) {\n        case \"SET-USER-DATA\":\n            return {\n                ...state,\n                ...action.data,\n                // isAuth: true\n            }\n        default:\n            return state\n    }\n}\n\n\nexport type AuthActionType = ReturnType<typeof setAuthUserData>\n\n\nconst SET_USER_DATA = \"SET-USER-DATA\";\n\n\nexport const setAuthUserData = (id: number, email: string, login: string, isAuth: boolean) => {\n    return {\n        type: SET_USER_DATA, data: {id, email, login, isAuth}\n    } as const\n}\n\n\nexport const getAuthUserData = (): any => {\n    return async (dispatch: Dispatch) => {\n        let response = await authAPI.me()\n        if (response.data.resultCode === 0) {   //ЕСЛИ ЗАЛОГИНЕНЫ, ТОГДА СЕТАЕМ resultCode === 0\n            let {id, email, login} = response.data.data\n            dispatch(setAuthUserData(id, email, login, true))\n        }\n    }\n}\n\nexport const login = (email: string, password: string, rememberMe: boolean) => {\n    return async (dispatch: Dispatch) => {\n        let response = await authAPI.login(email, password, rememberMe)\n        if (response.data.resultCode === 0) {   //ЕСЛИ ЗАЛОГИНЕНЫ, ТОГДА СЕТАЕМ resultCode === 0\n            dispatch(getAuthUserData())   //после вводв логина и мейла заново диспатчим АС\n        } else {\n            let errorMessage = response.data.messages.length > 0 ? response.data.messages[0] : \"Some error\"\n            dispatch(stopSubmit('login', {_error: errorMessage}))\n        }\n    }\n}\n\n// export const login = (email: string, password: string, rememberMe: boolean) => {\n//     return (dispatch: Dispatch) => {\n//         authAPI.login(email, password, rememberMe).then(response => {\n//             if (response.data.resultCode === 0) {   //ЕСЛИ ЗАЛОГИНЕНЫ, ТОГДА СЕТАЕМ resultCode === 0\n//                 dispatch(getAuthUserData())   //после вводв логина и мейла заново диспатчим АС\n//             } else {\n//                 let errorMessage = response.data.messages.length > 0 ? response.data.messages[0] : \"Some error\"\n//                 dispatch(stopSubmit('login', {_error: errorMessage}))\n//             }\n//         })\n//     }\n// }\n\nexport const logout = () => {\n    return async (dispatch: Dispatch) => {\n        let response = await authAPI.logout()\n        if (response.data.resultCode === 0) {   //ЕСЛИ ЗАЛОГИНЕНЫ, ТОГДА СЕТАЕМ resultCode === 0\n            dispatch(setAuthUserData(0, \"\", \"\", false))   //обнуляем все значения и сетаем чтобы выйти из системы\n        }\n    }\n}\n\n\nexport default authReducer","import {Dispatch} from \"redux\";\nimport {getAuthUserData} from \"./auth-reducer\";\n\n\nlet initialState = {\n    initialized: false\n\n}\n\ntype UsersStateType = {\n    initialized: boolean\n}\n\n\nconst appReducer = (state: UsersStateType = initialState, action: AuthActionType): UsersStateType => {\n    switch (action.type) {\n        case \"INITIALIZED_SUCCESS\":\n            return {\n                ...state,\n                initialized: true\n            }\n        default:\n            return state\n    }\n}\n\n\nexport type AuthActionType = ReturnType<typeof initializedSuccess>\n\n\nconst INITIALIZED_SUCCESS = \"INITIALIZED_SUCCESS\";\n\n\nexport const initializedSuccess = () => {\n    return {\n        type: INITIALIZED_SUCCESS,\n    } as const\n}\n\n\nexport const initializeApp = () => (dispatch: Dispatch) => {\n   let promise = dispatch (getAuthUserData())\n    Promise.all([promise]).then(()=> {\n        dispatch(initializedSuccess())\n    })\n}\n\n\n\nexport default appReducer","import {applyMiddleware, combineReducers, createStore} from \"redux\";\nimport profileReducer, {ProfileReducersActionsTypes} from \"./profile-reducer\";\nimport messageReducer, {MessageReducerActionsTypes} from \"./message-reducer\";\nimport usersReducer, {UsersActionType} from \"./users-reducer\";\nimport authReducer, {AuthActionType} from \"./auth-reducer\";\nimport thunkMiddleware from \"redux-thunk\";\nimport { reducer as formReducer } from \"redux-form\";\nimport appReducer from \"./app-reducer\";\n\nlet reducers = combineReducers({\n    profilePage: profileReducer,\n    messagePage: messageReducer,\n    usersPage: usersReducer,\n    auth: authReducer,\n    form: formReducer,\n    app: appReducer\n})\n\nexport type AppStateType = ReturnType<typeof reducers>\n\nexport type AppActionType = AuthActionType | MessageReducerActionsTypes | ProfileReducersActionsTypes | UsersActionType // все экшны приложения\n\nlet store = createStore(reducers, applyMiddleware(thunkMiddleware))\nexport default store","import loader from '../../assets/images/loader.png'\n\nconst Preloader = () =>{\n    return <div>\n        <img src={loader}/>\n    </div>\n\n}\n\nexport default Preloader","import React from 'react';\nimport s from './../Dialogs.module.css'\nimport {NavLink} from \"react-router-dom\";\n\n\ntype DialogItemType = {\n    name: string\n    id: number\n}\n\nconst DialogItem = (props: DialogItemType) => {\n    let path = \"/dislogs/\" + props.id\n    return <div className={s.dialog + ' ' + s.active}>\n        <NavLink to={path}>{props.name}</NavLink>\n    </div>\n}\n\n\nexport default DialogItem;","import React from 'react';\nimport s from './../Dialogs.module.css'\n\n\ntype messageType = {\n    message: string\n}\n\nconst Message = (props: messageType) => {\n\n\n    return (\n\n        <div className={s.dialog}>\n            {props.message}\n        </div>\n\n    )\n}\n\nexport default Message;","import s from \"./FormControls.module.css\";\n\n\nexport const Textarea = ({input, meta, ...props}: any) => { // достаём целиком инпут, ммета, а оставшиеся штуки оставить в пропсах\n\n    const hasError = meta.touched && meta.error\n\n    return (\n        <div className={s.formControl + \" \" + (hasError ? s.error : \"\")}>\n            <div >\n                <textarea {...input} {...props}/>\n            </div>\n            {hasError && <span>{meta.error}</span>}\n        </div>\n    )\n}\n\n\nexport const Input = ({input, meta, ...props}: any) => { // достаём целиком инпут, ммета, а оставшиеся штуки оставить в пропсах\n\n    const hasError = meta.touched && meta.error\n\n    return (\n        <div className={s.formControl + \"\" + (hasError ? s.error : \"\")}>\n            <div>\n                <input {...input} {...props}/>\n            </div>\n            {hasError && <span>{meta.error}</span>}\n        </div>\n    )\n}","\n\nexport const required = (value: string) => {\n    if (value) return undefined\n\n    return \"Field is required\"\n}\n\nexport const maxLenghtCreator = (maxLength: number) => (value: string) => {\n    if (value.length > maxLength) return `Max lenght is ${maxLength} symbols`\n    return undefined\n}","import React from \"react\";\nimport s from \"./Dialogs.module.css\"\nimport DialogItem from \"./DialogItem/DialogItem\";\nimport Message from \"./Message/Message\";\nimport {MessagePageType} from \"../../redux/message-reducer\";\nimport {reduxForm} from \"redux-form\";\nimport {AddMessageForm} from \"./AddMessageForm/AddMessageForm\";\n\n\ntype MyDialogsType = {\n    updateNewMessageBody: (onNewMessageBody: string) => void\n    messagePage: MessagePageType\n\n}\n\nexport type DialogsFormType = {\n    onNewMessageBody: string\n}\n\nconst AddMessageFormRedux = reduxForm<DialogsFormType>({form: 'dialogAddMessageForm'})(AddMessageForm)\n\n\nconst Dialogs = (props: MyDialogsType) => {\n\n\n    let dialogElements = props.messagePage.dialogs.map(dialog =>\n        <DialogItem name={dialog.name} id={dialog.id} key={dialog.id}/>\n    )\n\n\n    let messageElement = props.messagePage.messages.map(message =>\n        <Message message={message.message} key={message.id}/>\n    )\n\n\n\n\n    const addNewMessage = (value: DialogsFormType) => {\n        props.updateNewMessageBody(value.onNewMessageBody)\n\n    }\n\n\n    return (\n        <div className={s.dialogs}>\n            <div className={s.dialogsItems}>\n                {dialogElements}\n            </div>\n            <div className={s.messages}>\n                <div>{messageElement}</div>\n                <AddMessageFormRedux onSubmit={addNewMessage}/>\n                {/*<div>*/}\n                {/*    <div><textarea placeholder=\"Enter your message\" onChange={onNewMessageChange}*/}\n                {/*                   value={onNewMessageBody}/></div>*/}\n                {/*    <div>*/}\n                {/*        <button onClick={onSendMessageClick}>Send</button>*/}\n                {/*    </div>*/}\n                {/*</div>*/}\n            </div>\n        </div>\n    )\n}\n\n\nexport default Dialogs","import React from \"react\";\nimport {Field, InjectedFormProps} from \"redux-form\";\nimport {Textarea} from \"../../Common/FormsControls/FormsControls\";\nimport {required} from \"../../../utilits/validators/validators\";\nimport {DialogsFormType} from \"../Dialogs\";\n\nexport const AddMessageForm: React.FC<InjectedFormProps<DialogsFormType>> = (props) => {\n    return <div>\n        <form onSubmit={props.handleSubmit}>\n            <div>\n                <Field placeholder={\"Enter your message\"} name={\"onNewMessageBody\"} component={Textarea}\n                       validate={[required]}/>\n            </div>\n            <div>\n                <button>Send</button>\n            </div>\n        </form>\n    </div>\n}","import React from 'react';\nimport {AppStateType} from \"../redux/redux-store\";\nimport {Redirect} from \"react-router-dom\";\nimport {ComponentType} from \"react\";\nimport {connect} from \"react-redux\";\n\n\ntype MapStatePropsType = {\n    isAuth: boolean\n}\n\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\n    return {\n        isAuth: state.auth.isAuth\n    }\n}\n\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\n    class RedirectComponent extends React.Component<MapStatePropsType> {\n\n        render() {\n            let {isAuth, ...restProps} = this.props\n            if (!isAuth) return <Redirect to={'/login'}/>\n            return <Component {...restProps as T}/>\n        }\n    }\n\n    let ConnectRedirectComponent = connect(mapStateToProps)(RedirectComponent)\n    return ConnectRedirectComponent\n\n}\n","import React, {ChangeEvent} from \"react\";\nimport {sendMessageCreator} from \"../../redux/message-reducer\";\nimport Dialogs from \"./Dialogs\";\nimport {connect} from \"react-redux\";\nimport {AppStateType} from \"../../redux/redux-store\";\nimport {compose, Dispatch} from \"redux\";\nimport {withRouter} from \"react-router-dom\";\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\nimport {getUserProfile} from \"../../redux/profile-reducer\";\n\n//\n// type MyDialogsType = {\n//     // data: MessagePageType\n//     // dispatch: (action: ActionsTypes) => void\n//     // newMessageBody: string\n//\n//     store: ForReduxStoreType\n//\n//\n// }\n//\n// const DialogsContainer = (props: MyDialogsType) => {\n//\n//     let state = props.store.getState()\n//\n//     const onSendMessageClick = () => {\n//         props.store.dispatch(sendMessageCreator())\n//     }\n//\n//     const onNewMessageChange = (body: string) => {\n//         props.store.dispatch(updateNewMessageBodyCreator(body))\n//     }\n//\n//\n//     return <Dialogs updateNewMessageBody={onSendMessageClick}\n//                     sendMessage={onNewMessageChange}\n//                     messagePage={state.messagePage}\n//         // newMessageBody={state.newMessageBody}\n//         // data={props.data}\n//         //             newMessageBody={state.messagePage.newMessageBody}\n//         //             data={state.messagePage}\n//     />\n// }\n    let mapStateToProps = (state: AppStateType) => {\n        return {\n            messagePage: state.messagePage,\n            // isAuth: state.auth.isAuth\n        }\n    }\n\n    let mapDispatchToProps = (dispatch: Dispatch) => {\n        return {\n            updateNewMessageBody: (onNewMessageBody: string) => {     //из dialogs приходит newMessageBody, потом newMessageBody диспатчим в action creator, а он изменяет стейт\n                dispatch(sendMessageCreator(onNewMessageBody))\n            },\n            // sendMessage: (body: string) => {\n            //     dispatch(updateNewMessageBodyCreator(body))\n            // }\n        }\n    }\n\nexport default compose<React.ComponentType>(                                              ///это вместо нижележащего\n    connect(mapStateToProps,mapDispatchToProps),\n    withAuthRedirect\n)(Dialogs)\n// let AuthRedirectComponent = withAuthRedirect(Dialogs)\n//\n// const DialogsContainer = connect(mapStateToProps,mapDispatchToProps) (AuthRedirectComponent)\n//\n//\n// export default DialogsContainer","import React from 'react';\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {Input} from \"../Common/FormsControls/FormsControls\";\nimport {required} from \"../../utilits/validators/validators\";\nimport {connect} from \"react-redux\";\nimport {login} from \"../../redux/auth-reducer\";\nimport {AppStateType} from \"../../redux/redux-store\";\nimport s from \"../Common/FormsControls/FormControls.module.css\";\nimport {Redirect} from \"react-router-dom\";\n\n\ntype FormDataType = {\n    email: string\n    password: string\n    rememberMe: boolean\n    login: (email: string, password: string, rememberMe: boolean) => void\n\n}\n\ntype LoginType = {\n    login: (email: string, password: string, rememberMe: boolean) => void\n    isAuth: boolean\n}\n\n\nconst LoginForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\n    return <div>\n        <form onSubmit={props.handleSubmit}>\n            <div>\n                <Field placeholder={\"email\"} name={\"email\"} component={Input} validate={[required]}/>\n            </div>\n            <div>\n                <Field placeholder={\"Password\"} name={\"password\"} component={Input} type={\"password\"}\n                       validate={[required]}/>\n            </div>\n            <div>\n                <Field type={\"checkbox\"} component={Input} name={\"remember me\"}/> remember me\n            </div>\n            {props.error && <div className={s.formSummaryError}> {props.error}\n            </div>}\n            <div>\n                <button>Login</button>\n            </div>\n        </form>\n    </div>\n}\n\nconst LoginReduxForm = reduxForm<FormDataType>({form: 'login'})(LoginForm)\n\nconst Login = (props: LoginType) => {\n    const onSubmit = (formData: FormDataType) => {\n        props.login(formData.email, formData.password, formData.rememberMe)\n    }\n\n    if (props.isAuth) {\n        return <Redirect to={'/profile'}/>\n    }\n\n    return (\n        <div>\n            <h1>THIS LOGIN</h1>\n            <LoginReduxForm onSubmit={onSubmit}/>\n        </div>\n    )\n}\n\nlet mapStateToProps = (state: AppStateType) => {\n    return {\n        isAuth: state.auth.isAuth\n    }\n}\n\nexport default connect(mapStateToProps, {login})(Login)","import React, {ChangeEvent, useEffect, useState} from 'react'\n\n\ntype ProfileStatusType = {\n    status: string\n    updateStatus: (status: string) => void\n}\n\n\nconst ProfileStatus = (props: ProfileStatusType) => {\n\n\n    let [newstatus, setNewStatus] = useState(props.status)\n    let [editMode, setEditMode] = useState(false)\n\n\n    const onClickChangeStatus = () => {\n        setEditMode(true)\n    }\n\n    const afterChangeStatus = () => {\n        setEditMode(false)\n        props.updateStatus(newstatus)\n    }\n\n    const onChangeStatus = (e: ChangeEvent<HTMLInputElement>) => {\n        setNewStatus(e.currentTarget.value)\n    }\n\n    useEffect(() => {\n            setNewStatus(props.status)\n        }, [props.status]\n    )\n\n\n    return (<div>\n            {!editMode &&\n            <div>\n                <span onClick={onClickChangeStatus}>{props.status || \"no status\"}</span>\n            </div>\n            }\n            {editMode &&\n            <div>\n                <input onChange={onChangeStatus}\n                       autoFocus={true}\n                       onBlur={afterChangeStatus}\n                       value={newstatus}/>\n            </div>\n            }\n\n\n        </div>\n    )\n}\n\nexport default ProfileStatus;\n\nfunction componentDidUpdate() {\n    throw new Error('Function not implemented.')\n}\n","import React from \"react\";\r\nimport {ProfileType} from \"../../../redux/profile-reducer\";\r\n\r\n\r\ntype ProfileDataType = {\r\n    profile: ProfileType\r\n    goToEditMode: () => void\r\n    isOwner: boolean\r\n}\r\n\r\nconst ProfileData = (props: ProfileDataType) => {\r\n    return <div>\r\n        {props.isOwner && <div>\r\n            <button onClick={props.goToEditMode}>Edit</button>\r\n        </div>}\r\n        <div>\r\n            <b>Full name</b>: {props.profile.fullName}\r\n        </div>\r\n        <div>\r\n            <b>lookingForAJobDescription</b>: {props.profile.lookingForAJobDescription}\r\n        </div>\r\n        <div>\r\n            <b>aboutMe</b>: {props.profile.aboutMe}\r\n        </div>\r\n        {/*<div>*/}\r\n        {/*    <b>Contacts</b>: {Object.keys(props.profile.contacts).map((key) => {*/}\r\n        {/*    return <Contact key={key} contactTitle={key}*/}\r\n        {/*                    contactValue={props.profile.contacts[key as keyof ContactType]}/>*/}\r\n        {/*})}*/}\r\n        {/*</div>*/}\r\n    </div>\r\n}\r\n\r\nexport default ProfileData","import React, {useState} from 'react'\nimport s from '././ProfileInfo.module.css';\nimport {ProfileType, saveProfile, updateAvatar} from \"../../../redux/profile-reducer\";\nimport ProfileStatus from \"./ProfileStatus\";\nimport userPhoto from \"../../../assets/images/users.jpg\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport ProfileData from \"./ProfileData\";\nimport {AppStateType} from \"../../../redux/redux-store\";\nimport {Field, Form, Formik} from \"formik\";\n\n\ntype ProfileInfoComponentType = {\n    profile: ProfileType\n    status: string\n    updateStatus: (status: string) => void\n    isOwner: boolean\n    // offEditMode: () => void\n}\n\ntype DataFormikType = {\n    offEditMode: () => void\n}\n\nexport type ContactType = {\n    github: string\n    vk: string\n    facebook: string\n    instagram: string\n    twitter: string\n    website: string\n    youtube: string\n    mainLink: string\n}\n\nconst ProfileInfo = (props: ProfileInfoComponentType) => {\n\n    const dispatch = useDispatch()\n\n    const isOwner = props.isOwner\n\n    let addPhoto = (e: any) => {\n        dispatch(updateAvatar(e.target.files[0]))\n    }\n\n\n    const [editMode, setEditMode] = useState(false)\n\n    return (<div>\n            <div className={s.descriptionBlock}>\n                <img src={props.profile.photos.large || userPhoto} className={s.mainFoto}/>\n            </div>\n            {isOwner && <input type={\"file\"} accept={\".jpg, .jpeg, .png\"} onChange={addPhoto}/>}\n            {editMode ? <ProfileDataForm offEditMode={() => {\n                setEditMode(false)\n            }}/> : <ProfileData goToEditMode={() => {\n                setEditMode(true)\n            }} profile={props.profile} isOwner={isOwner}/>}\n\n\n            <ProfileStatus status={props.status} updateStatus={props.updateStatus}/>\n\n\n        </div>\n    )\n}\n\nconst ProfileDataForm = (props: DataFormikType) => {\n\n    const dispatch = useDispatch()\n    const saveProfileData = (profile: any) => {\n        dispatch(saveProfile(profile))\n    }\n    const fullName = useSelector<AppStateType, string>(state => state.profilePage.profile.fullName)\n    const lookingForAJobDescription = useSelector<AppStateType, string>(state => state.profilePage.profile.lookingForAJobDescription)\n    const aboutMe = useSelector<AppStateType, string>(state => state.profilePage.profile.aboutMe)\n\n\n    return <div>\n        <Formik\n            initialValues={{fullName: fullName, lookingForAJobDescription: lookingForAJobDescription, aboutMe: aboutMe}}\n            validate={values => {\n                const errors = {};\n                return errors;\n            }}\n            onSubmit={(values, {setSubmitting}) => {\n                saveProfileData(values)\n\n                // alert(JSON.stringify(values, null, 2));\n                setSubmitting(false);\n                props.offEditMode()\n\n            }}\n        >\n            {({isSubmitting}) => (\n                <Form>\n                    <div>\n                        <b>Full name</b>: <Field type=\"fullName\" name=\"fullName\"/>\n                    </div>\n                    <div>\n                        <b>lookingForAJobDescription</b>: <Field type=\"lookingForAJobDescription\"\n                                                                 name=\"lookingForAJobDescription\"/>\n                    </div>\n                    <div>\n                        <b>aboutMe</b>: <Field type=\"aboutMe\" name=\"aboutMe\"/>\n                    </div>\n                    {/*<div>*/}\n                    {/*    <b>Contacts</b>: {Object.keys(profile.contacts).map((key) => {*/}\n                    {/*    return <div>*/}\n                    {/*        {key}:<Field key={key} name=\"contacts\"/>*/}\n                    {/*    </div>})}*/}\n                    {/*</div>*/}\n                    <button type=\"submit\" disabled={isSubmitting}>\n                        Save\n                    </button>\n                </Form>\n            )}\n        </Formik>\n    </div>\n}\n\n\nexport const Contact = ({contactTitle, contactValue}: any) => {\n    return <div className={s.contact}><b>{contactTitle}</b>: {contactValue}</div>\n\n}\nexport default ProfileInfo;","import React from 'react';\nimport s from './Post.module.css';\n\n\ntype PostType = {\n    message: string\n    likesCount: number\n}\n\nconst Post = (props: PostType) => {\n    return (\n        <div className={s.item}>\n            <img src='https://images-na.ssl-images-amazon.com/images/I/61IkrxQ9p8L._AC_SL1500_.jpg'/>\n            {props.message}\n            <div>\n                <span>likes</span> {props.likesCount}\n            </div>\n        </div>\n    )\n}\n\nexport default Post;","import Post from \"./Post\";\nimport {PostsType} from \"../../../../redux/profile-reducer\";\nimport s from './MyPosts.module.css';\nimport React from \"react\";\nimport  {Field,InjectedFormProps, reduxForm} from \"redux-form\";\nimport {Textarea} from \"../../../Common/FormsControls/FormsControls\";\nimport {maxLenghtCreator, required} from \"../../../../utilits/validators/validators\";\n\n\ntype MyPostsType = {\n    post: Array<PostsType>\n    addPost: (newPostText: string) => void\n\n}\n\nexport type PostFormType = {\n    newPostText: string\n}\n\nconst maxLength10 = maxLenghtCreator(10)\n\nconst MyPosts = (props: MyPostsType) => {\n\n\n    let postsElement = props.post.map(p =>\n        <Post message={p.message} likesCount={p.likesCount}/>\n    )\n\n\n    const onAddPost = (value: PostFormType) => {\n        props.addPost(value.newPostText)\n    }\n\n\n    return (\n        <div className={s.postsBlock}>\n            <h2>My posts</h2>\n            <AddNewPost onSubmit={onAddPost}/>\n            <div className={s.posts}>\n                {postsElement}\n            </div>\n        </div>\n    )\n}\n\nconst AddNewPostForm: React.FC<InjectedFormProps<PostFormType>> = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div>\n                <Field name={\"newPostText\"} component={Textarea} placeholder={\"enter new post\"}\n                       validate={[required, maxLength10]}/>\n            </div>\n            <div>\n                <button>Add post</button>\n            </div>\n        </form>\n    )\n}\n\nconst AddNewPost = reduxForm<PostFormType>({form: \"ProfileAddNewPostForm\"})(AddNewPostForm)\n\n\n\nexport default MyPosts;","import {addPostActionCreator} from \"../../../../redux/profile-reducer\";\nimport React from \"react\";\nimport MyPosts from \"./MyPosts\";\nimport {connect} from \"react-redux\";\nimport {Dispatch} from \"redux\";\nimport {AppStateType} from \"../../../../redux/redux-store\";\n\n//\n// type MyPostsType = {\n//     // post: ProfilePageType\n//     // newPostText: string\n//     // dispatch: (action: ActionsTypes) => void\n//\n//     store: ForReduxStoreType\n// }\n//\n//\n// const MyPostsContainer = (props: MyPostsType) => {\n//\n//     let state = props.store.getState()\n//\n//     const addPost = () => {\n//         props.store.dispatch(addPostActionCreator())\n//     }\n//\n//     const onPostChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\n//         props.store.dispatch(updateNewPostTextActionCreator(e.currentTarget.value))\n//     }\n//\n//\n//     return <MyPosts updateNewPostText={onPostChange}\n//                     post={state.profilePage.posts}\n//                     newPostText={state.profilePage.newPostText}\n//                     addPost={addPost}/>\n// }\nlet mapStateToProps = (state: AppStateType) => {\n    return {\n        post: state.profilePage.posts,\n        // newPostText: state.profilePage.newPostText\n    }\n}\n\nlet mapDispatchToProps = (dispatch: Dispatch) => {\n    return {\n        addPost: (newPostText: string) => {\n            dispatch(addPostActionCreator(newPostText))\n        }\n    }\n}\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\n\n\nexport default MyPostsContainer;","import React from 'react';\nimport ProfileInfo from \"../ProfileInfo/ProfileInfo\";\nimport MyPostsContainer from \"../MyPosts/Post/MyPostsContainer\";\nimport {ProfileType} from \"../../../redux/profile-reducer\";\n\ntype ProfileComponentType = {\n    profile: ProfileType\n    status: string\n    updateStatus: (status: string) => void\n    isOwner: boolean\n\n}\n\nconst Profile = (props: ProfileComponentType) => {\n\n\n    return (\n        <div>\n            <ProfileInfo profile={props.profile} status={props.status} updateStatus={props.updateStatus} isOwner={props.isOwner}/>\n            <MyPostsContainer/>\n        </div>\n    )\n}\n\nexport default Profile;","import React from 'react';\nimport {AppStateType} from \"../../../redux/redux-store\";\nimport {connect} from \"react-redux\";\nimport Profile from \"./Profile\";\nimport {getUserProfile, getUserStatus, ProfileType, updateStatus} from \"../../../redux/profile-reducer\";\nimport { RouteComponentProps, withRouter} from 'react-router-dom';\nimport {withAuthRedirect} from \"../../../hoc/withAuthRedirect\";\nimport {compose} from \"redux\";\n\nexport type ProfileContainerType = {\n    profile: ProfileType\n    // setUserProfile: (profile: ProfileType) => void\n    getUserProfile: (userID: number) => void\n    isAuth: boolean\n    getUserStatus: (userID: number) => void\n    updateStatus: (status: string) => void\n    status: string\n    autorizedUserID: number\n\n}\n\nexport type MapStatePropsType = {\n    profile: ProfileType\n    // userStatus: string\n    status: string\n    autorizedUserID: number\n}\n\nexport type PathParamsType = {\n    userId:  any\n}\n\nexport type OwnPropsType = ProfileContainerType\nexport type OwnProfileContainerType = RouteComponentProps<PathParamsType> & OwnPropsType\n\nclass ProfileContainer extends React.Component<OwnProfileContainerType> {\n\n\n    componentDidMount() {\n\n        let userId = this.props.match.params.userId\n        if (!userId) {\n            userId = this.props.autorizedUserID\n        }\n        this.props.getUserProfile(userId)\n        this.props.getUserStatus(userId)\n        // axios.get(`https://social-network.samuraijs.com/api/1.0/profile/` + userId)\n        //     .then(response => {\n        //         this.props.setUserProfile(response.data)\n        //     })\n    }\n\n    render() {\n\n        // if (!this.props.isAuth) return <Redirect to={\"/login\"}/>     //(this.props.isAuth===false)\n        // если не залогинены - попадаем на страницу /login\n        return <>\n\n            <Profile {...this.props} profile={this.props.profile} status={this.props.status}\n                     updateStatus={this.props.updateStatus} isOwner={!this.props.match.params.userId}/>\n        </>\n    }\n}\n\n\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => ({\n    profile: state.profilePage.profile,\n    status: state.profilePage.status,\n    autorizedUserID: state.auth.userId\n\n})\n\nexport default compose<React.ComponentType>(\n    connect(mapStateToProps,\n        {getUserProfile, getUserStatus, updateStatus}),\n    // withAuthRedirect,\n    withRouter\n)(ProfileContainer)\n\n// let WithUrlDataContainerComponent = withRouter(ProfileContainer)\n//\n// // const UsersContainer = connect(mapStateToProps, { setUserProfile})(UsersСontainer)\n//\n// export default withAuthRedirect(connect(mapStateToProps,\n//     // {setUserProfile},\n//     {getUserProfile})(WithUrlDataContainerComponent))\n//\n// // export default connect(mapStateToProps,\n// //     // {setUserProfile},\n// //     {getUserProfile})(WithUrlDataContainerComponent)","import React from 'react';\nimport {Avatar, Button, Col, Layout, Row, Image} from \"antd\";\nimport {UserOutlined} from \"@ant-design/icons\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppStateType} from \"../../redux/redux-store\";\nimport {NavLink} from \"react-router-dom\";\nimport {logout} from \"../../redux/auth-reducer\";\n\n\n// type HeaderAuthType = {\n//     login: string\n//     isAuth: boolean\n//     logout: () => void\n// }\n\nexport const Header = () => {\n\n    const isAuth = useSelector<AppStateType>(state => state.auth.isAuth)\n    const login = useSelector<AppStateType>(state => state.auth.login)\n\n\n    const dispatch = useDispatch()\n\n    const logoutCallback = () => {\n        dispatch(logout())\n    }\n\n    const {Header} = Layout;\n    return <Header className=\"header\" style={{backgroundColor: '#629e74'}}>\n        <Row>\n            <Col span={20}> </Col>\n            <Col span={4}> {isAuth\n                ? <div>\n                    <Avatar\n                        style={{backgroundColor: '#87d068'}} icon={<UserOutlined/>}/>\n                    {login}-<Button onClick={logoutCallback}>Logout</Button>\n                </div> : <NavLink to={\"/login\"}>Login</NavLink>}\n            </Col>\n        </Row>\n    </Header>\n\n    // <header className={s.header}>\n    //     <img src='https://s.starladder.com/uploads/team_logo/7/7/c/1/thumb_270_2eb66ca0fa0345cc85ad134e7bad0789.jpeg'/>\n    //     <div className={s.loginBlock}>\n    //         {props.isAuth\n    //             ? <div>{props.login}-<button onClick={props.logout}>Logout</button></div>: <NavLink to={\"/login\"}>Login</NavLink>}\n    //     </div>\n    // </header>\n\n}\n\n// export default Header;","import './App.css';\r\nimport React from 'react';\r\nimport 'antd/dist/antd.css';\r\nimport {connect} from \"react-redux\";\r\nimport {initializeApp} from \"./redux/app-reducer\";\r\nimport {AppStateType} from \"./redux/redux-store\";\r\nimport Preloader from \"./components/Common/Preloader\";\r\nimport {Layout, Menu, Breadcrumb, Avatar, Row, Col} from 'antd';\r\nimport {UserOutlined, LaptopOutlined, NotificationOutlined} from '@ant-design/icons';\r\nimport {NavLink, Redirect, Switch, Route} from \"react-router-dom\";\r\nimport DialogsContainer from \"./components/Dialogs/DialogsContainer\";\r\nimport LoginPage from \"./components/Login/Login\";\r\nimport ProfileContainer from \"./components/Profile/Profile/ProfileContainer\";\r\nimport {withSuspense} from \"./hoc/withSuspense\";\r\nimport {Header} from \"./components/Header/Header\";\r\n\r\n\r\n\r\nconst {SubMenu} = Menu;\r\nconst {Content, Sider} = Layout;\r\n\r\ntype getUserAppType = {\r\n    initializeApp: () => void\r\n    initialized: boolean\r\n}\r\n\r\nconst UsersContainerFC = React.lazy(() => import (\"./components/Users/UserContainerFC\"));\r\n\r\nclass App extends React.Component<getUserAppType> {\r\n\r\n    componentDidMount() {\r\n        this.props.initializeApp()\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.initialized) {\r\n            return <Preloader/>\r\n        }\r\n\r\n\r\n        return (\r\n            <div>\r\n                <Layout>\r\n                        <Header/>\r\n                        {/*<Row>*/}\r\n                        {/*    <Col span={22}> </Col>*/}\r\n                        {/*    <Col span={2}><Avatar style={{ backgroundColor: '#87d068' }} icon={<UserOutlined />} /></Col>*/}\r\n                        {/*</Row>*/}\r\n                    <Layout>\r\n                        <Sider width={200} className=\"site-layout-background\">\r\n                            <Menu\r\n                                mode=\"inline\"\r\n                                defaultSelectedKeys={['1']}\r\n                                defaultOpenKeys={['sub1']}\r\n                                style={{height: '100%', borderRight: 0}}\r\n                            >\r\n\r\n                                <SubMenu key=\"sub1\" icon={<UserOutlined/>} title=\"Main\">\r\n                                    <Menu.Item key=\"1\"><NavLink to=\"/profile\">Profile</NavLink></Menu.Item>\r\n                                    <Menu.Item key=\"2\"><NavLink to=\"/dialogs\">Dialogs</NavLink></Menu.Item>\r\n                                    <Menu.Item key=\"3\"><NavLink to=\"/users\">Users</NavLink></Menu.Item>\r\n                                    <Menu.Item key=\"4\"><NavLink to=\"/news\">News</NavLink></Menu.Item>\r\n                                    <Menu.Item key=\"5\"><NavLink to=\"/music\">Music</NavLink></Menu.Item>\r\n                                </SubMenu>\r\n                                <SubMenu key=\"sub2\" icon={<LaptopOutlined/>} title=\"More\">\r\n                                    <Menu.Item key=\"6\"><NavLink to=\"/setting\">Settings</NavLink></Menu.Item>\r\n                                </SubMenu>\r\n                            </Menu>\r\n                        </Sider>\r\n                        <Layout style={{padding: '0 24px 24px'}}>\r\n                            <Breadcrumb style={{margin: '16px 0'}}>\r\n                                <Breadcrumb.Item>Home</Breadcrumb.Item>\r\n                                <Breadcrumb.Item>List</Breadcrumb.Item>\r\n                                <Breadcrumb.Item>App</Breadcrumb.Item>\r\n                            </Breadcrumb>\r\n                            <Content className=\"site-layout-background\" style={{\r\n                                padding: 24,\r\n                                margin: 0,\r\n                                minHeight: 280,\r\n                            }}\r\n                            >\r\n                                <Switch>\r\n                                    <Route exact\r\n                                           path='/'                           // exact - показывай эту страницу только если адрес полностью совпадает. Это для того,//чтобы при загрузке сразу открывался профайл наш\r\n                                           render={() => <Redirect to={\"/profile\"}/>}/>\r\n                                    <Route path='/dialogs'\r\n                                           render={() => <DialogsContainer/>}/>\r\n                                    <Route path='/profile/:userId?'\r\n                                           render={() => <ProfileContainer/>}/>\r\n                                    <Route path='/users'\r\n                                           render={withSuspense(UsersContainerFC)}/>\r\n                                    <Route path='/login'\r\n                                           render={() => <LoginPage/>}/>\r\n                                </Switch>\r\n\r\n                            </Content>\r\n                        </Layout>\r\n                    </Layout>\r\n                </Layout>\r\n            </div>\r\n\r\n            // <HashRouter>\r\n            //     <div className='app-wrapper'>\r\n            //         <HeaderContainer/>\r\n            //         <Navbar/>\r\n            //         <div className='app-wrapper-content'>\r\n            //             <Switch>\r\n            //\r\n            //                 <Route exact path='/'                           // exact - показывай эту страницу только если адрес полностью совпадает. Это для того,\r\n            //                                                                   //чтобы при загрузке сразу открывался профайл наш\r\n            //                        render={() => <Redirect to={\"/profile\"}/>}/>\r\n            //\r\n            //\r\n            //                 <Route path='/dialogs'\r\n            //                        render={() => <DialogsContainer/>}/>\r\n            //                 <Route path='/profile/:userId?'\r\n            //                        render={() => <ProfileContainer/>}/>\r\n            //                 <Route path='/users'\r\n            //                        render={withSuspense(UsersContainerFC)}/>\r\n            //\r\n            //                 <Route path='/login'\r\n            //                        render={() => <LoginPage/>}/>\r\n            //             </Switch>\r\n            //         </div>\r\n            //     </div>\r\n            // </HashRouter>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        initialized: state.app.initialized\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {initializeApp})(App)\r\n","import React, {ComponentType} from 'react';\n\n\nexport function withSuspense<T>(Component: ComponentType<T>) {\n    return (props: any) => {\n        return <React.Suspense fallback={<div>Loading...</div>}>\n            <Component {...props as T}/>\n        </React.Suspense>\n    }\n}\n\n\n","import React from 'react';\nimport './index.css';\nimport store from \"./redux/redux-store\";\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {BrowserRouter} from \"react-router-dom\";\n// import {Provider} from \"./StoreContext\";\nimport {Provider} from \"react-redux\";\n\n\n\n    ReactDOM.render(\n        <BrowserRouter>\n            <Provider  store={store}>\n            <App   />\n            </Provider>\n        </BrowserRouter>,\n        document.getElementById('root')\n    );\n\n\n// rerenderEntireTree()\n\n//перерисуем всё дерево\n// store.subscribe(rerenderEntireTree)\n//\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__7oQaZ\",\"dialogsItems\":\"Dialogs_dialogsItems__m9MD6\",\"active\":\"Dialogs_active__7QZTh\",\"messages\":\"Dialogs_messages__pb9o8\",\"message\":\"Dialogs_message__12dll\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormControls_formControl__1v_a6\",\"error\":\"FormControls_error__3no1B\",\"good\":\"FormControls_good__3RpN1\",\"formSummaryError\":\"FormControls_formSummaryError__1K1bZ\"};"],"sourceRoot":""}